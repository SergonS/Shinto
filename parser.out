Grammar:

Rule 0     S' -> program
Rule 1     program -> PROG ID check_program ; gvars store_gvars functions gvars store_gvars main
Rule 2     gvars -> VAR datatype gvarids store_gtype ; gvars
Rule 3     gvars -> <empty>
Rule 4     gvarids -> ID
Rule 5     gvarids -> ID , gvarids
Rule 6     store_gvars -> <empty>
Rule 7     store_gtype -> <empty>
Rule 8     vars -> VAR datatype varids store_type ; vars
Rule 9     vars -> <empty>
Rule 10    varids -> ID
Rule 11    varids -> ID , varids
Rule 12    store_type -> <empty>
Rule 13    functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
Rule 14    functions -> <empty>
Rule 15    funcontent -> <empty>
Rule 16    funcontent -> statement funcontent
Rule 17    params -> ID : datatype , params
Rule 18    params -> ID : datatype
Rule 19    params -> <empty>
Rule 20    main -> FUNC MAIN ( ) store_funcm { vars store_mainv maincontent }
Rule 21    maincontent -> <empty>
Rule 22    maincontent -> statement maincontent
Rule 23    statement -> loop unload_pv
Rule 24    statement -> input unload_pv
Rule 25    statement -> output unload_pv
Rule 26    statement -> ifelse unload_pv
Rule 27    statement -> returns unload_pv ;
Rule 28    statement -> expr ;
Rule 29    statement -> var_assign unload_pv
Rule 30    statement -> <empty>
Rule 31    statement -> statement statement
Rule 32    var_assign -> ID store_oper = expr ;
Rule 33    returns -> RETURN expr store_rquad
Rule 34    ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
Rule 35    ifelse -> IF ( expr ) store_gotof { statement } store_endif
Rule 36    output -> OUTPUT ( expr outex ) ;
Rule 37    outex -> <empty>
Rule 38    outex -> , expr outex
Rule 39    input -> INPUT ( ID store_oper ) ;
Rule 40    loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop
Rule 41    expr -> arexp exprx
Rule 42    exprx -> <empty>
Rule 43    exprx -> exprop arexp
Rule 44    exprop -> OR
Rule 45    exprop -> EQEQ
Rule 46    exprop -> DIFF
Rule 47    exprop -> AND
Rule 48    exprop -> <
Rule 49    exprop -> LOETHAN
Rule 50    exprop -> >
Rule 51    exprop -> GOETHAN
Rule 52    arexp -> term arexpextra
Rule 53    arexp -> term
Rule 54    arexpextra -> <empty>
Rule 55    arexpextra -> - term arexpextra  [precedence=left, level=1]
Rule 56    arexpextra -> + term arexpextra  [precedence=left, level=1]
Rule 57    term -> factor termx
Rule 58    term -> factor
Rule 59    termx -> <empty>
Rule 60    termx -> / factor termx  [precedence=left, level=2]
Rule 61    termx -> * factor termx  [precedence=left, level=2]
Rule 62    factor -> element
Rule 63    factor -> ( store_op expr ) store_op
Rule 64    element -> callfunc store_oper
Rule 65    element -> compound store_oper
Rule 66    element -> const store_const
Rule 67    compound -> compoundx
Rule 68    compoundx -> ID store_oper
Rule 69    const -> STRING
Rule 70    const -> FLOAT
Rule 71    const -> INT
Rule 72    const -> FALSE
Rule 73    const -> TRUE
Rule 74    callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
Rule 75    callfuncpar -> <empty>
Rule 76    callfuncpar -> expr store_pquad callfuncparx
Rule 77    callfuncparx -> <empty>
Rule 78    callfuncparx -> , callfuncpar
Rule 79    datatype -> VOID
Rule 80    datatype -> D_BOOL
Rule 81    datatype -> D_STRING
Rule 82    datatype -> D_FLOAT
Rule 83    datatype -> D_INT
Rule 84    check_program -> <empty>
Rule 85    store_init_quad -> <empty>
Rule 86    store_funcm -> <empty>
Rule 87    store_funcv -> <empty>
Rule 88    store_params -> <empty>
Rule 89    store_local_vars -> <empty>
Rule 90    store_mainv -> <empty>
Rule 91    store_op -> <empty>
Rule 92    store_oper -> <empty>
Rule 93    store_const -> <empty>
Rule 94    unload_pv -> <empty>
Rule 95    store_rquad -> <empty>
Rule 96    close_func -> <empty>
Rule 97    store_endif -> <empty>
Rule 98    store_pquad -> <empty>
Rule 99    ver_params -> <empty>
Rule 100   verify_func -> <empty>
Rule 101   add_fstack -> <empty>
Rule 102   end_fstack -> <empty>
Rule 103   store_gosub -> <empty>
Rule 104   store_gotof -> <empty>
Rule 105   store_jump -> <empty>
Rule 106   end_loop -> <empty>

Unused terminals:

    COMMENT

Terminals, with rules where they appear:

(                    : 13 20 34 35 36 39 40 63 74
)                    : 13 20 34 35 36 39 40 63 74
*                    : 61
+                    : 56
,                    : 5 11 17 38 78
-                    : 55
/                    : 60
:                    : 17 18
;                    : 1 2 8 27 28 32 36 39
<                    : 48
=                    : 32
>                    : 50
AND                  : 47
COMMENT              : 
DIFF                 : 46
D_BOOL               : 80
D_FLOAT              : 82
D_INT                : 83
D_STRING             : 81
ELSE                 : 34
EQEQ                 : 45
FALSE                : 72
FLOAT                : 70
FUNC                 : 13 20
GOETHAN              : 51
ID                   : 1 4 5 10 11 13 17 18 32 39 68 74
IF                   : 34 35
INPUT                : 39
INT                  : 71
LOETHAN              : 49
MAIN                 : 20
OR                   : 44
OUTPUT               : 36
PROG                 : 1
RETURN               : 33
STRING               : 69
TRUE                 : 73
VAR                  : 2 8
VOID                 : 79
WHILE                : 40
error                : 
{                    : 13 20 34 34 35 40
}                    : 13 20 34 34 35 40

Nonterminals, with rules where they appear:

add_fstack           : 74
arexp                : 41 43
arexpextra           : 52 55 56
callfunc             : 64
callfuncpar          : 74 78
callfuncparx         : 76
check_program        : 1
close_func           : 13
compound             : 65
compoundx            : 67
const                : 66
datatype             : 2 8 13 17 18
element              : 62
end_fstack           : 74
end_loop             : 40
expr                 : 28 32 33 34 35 36 38 40 63 76
exprop               : 43
exprx                : 41
factor               : 57 58 60 61
funcontent           : 13 16
functions            : 1 13
gvarids              : 2 5
gvars                : 1 1 2
ifelse               : 26
input                : 24
loop                 : 23
main                 : 1
maincontent          : 20 22
outex                : 36 38
output               : 25
params               : 13 17
program              : 0
returns              : 27
statement            : 16 22 31 31 34 34 35 40
store_const          : 66
store_endif          : 34 35
store_funcm          : 20
store_funcv          : 13
store_gosub          : 74
store_gotof          : 34 35 40
store_gtype          : 2
store_gvars          : 1 1
store_init_quad      : 13
store_jump           : 40
store_local_vars     : 13
store_mainv          : 20
store_op             : 63 63
store_oper           : 32 39 64 65 68
store_params         : 13
store_pquad          : 76
store_rquad          : 33
store_type           : 8
term                 : 52 53 55 56
termx                : 57 60 61
unload_pv            : 23 24 25 26 27 29
var_assign           : 29
varids               : 8 11
vars                 : 8 13 20
ver_params           : 74
verify_func          : 74


state 0

    (0) S' -> . program
    (1) program -> . PROG ID check_program ; gvars store_gvars functions gvars store_gvars main
    PROG            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> PROG . ID check_program ; gvars store_gvars functions gvars store_gvars main
    ID              shift and go to state 3


state 3

    (1) program -> PROG ID . check_program ; gvars store_gvars functions gvars store_gvars main
    (84) check_program -> .
    ;               reduce using rule 84 (check_program -> .)

    check_program                  shift and go to state 4

state 4

    (1) program -> PROG ID check_program . ; gvars store_gvars functions gvars store_gvars main
    ;               shift and go to state 5


state 5

    (1) program -> PROG ID check_program ; . gvars store_gvars functions gvars store_gvars main
    (2) gvars -> . VAR datatype gvarids store_gtype ; gvars
    (3) gvars -> .
  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 7
    VOID            reduce using rule 3 (gvars -> .)
    D_BOOL          reduce using rule 3 (gvars -> .)
    D_STRING        reduce using rule 3 (gvars -> .)
    D_FLOAT         reduce using rule 3 (gvars -> .)
    D_INT           reduce using rule 3 (gvars -> .)
    FUNC            reduce using rule 3 (gvars -> .)

    gvars                          shift and go to state 6

state 6

    (1) program -> PROG ID check_program ; gvars . store_gvars functions gvars store_gvars main
    (6) store_gvars -> .
    VOID            reduce using rule 6 (store_gvars -> .)
    D_BOOL          reduce using rule 6 (store_gvars -> .)
    D_STRING        reduce using rule 6 (store_gvars -> .)
    D_FLOAT         reduce using rule 6 (store_gvars -> .)
    D_INT           reduce using rule 6 (store_gvars -> .)
    VAR             reduce using rule 6 (store_gvars -> .)
    FUNC            reduce using rule 6 (store_gvars -> .)

    store_gvars                    shift and go to state 8

state 7

    (2) gvars -> VAR . datatype gvarids store_gtype ; gvars
    (79) datatype -> . VOID
    (80) datatype -> . D_BOOL
    (81) datatype -> . D_STRING
    (82) datatype -> . D_FLOAT
    (83) datatype -> . D_INT
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    datatype                       shift and go to state 9

state 8

    (1) program -> PROG ID check_program ; gvars store_gvars . functions gvars store_gvars main
    (13) functions -> . datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (14) functions -> .
    (79) datatype -> . VOID
    (80) datatype -> . D_BOOL
    (81) datatype -> . D_STRING
    (82) datatype -> . D_FLOAT
    (83) datatype -> . D_INT
    VAR             reduce using rule 14 (functions -> .)
    FUNC            reduce using rule 14 (functions -> .)
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    functions                      shift and go to state 15
    datatype                       shift and go to state 16

state 9

    (2) gvars -> VAR datatype . gvarids store_gtype ; gvars
    (4) gvarids -> . ID
    (5) gvarids -> . ID , gvarids
    ID              shift and go to state 18

    gvarids                        shift and go to state 17

state 10

    (79) datatype -> VOID .
    ID              reduce using rule 79 (datatype -> VOID .)
    FUNC            reduce using rule 79 (datatype -> VOID .)
    ,               reduce using rule 79 (datatype -> VOID .)
    )               reduce using rule 79 (datatype -> VOID .)


state 11

    (80) datatype -> D_BOOL .
    ID              reduce using rule 80 (datatype -> D_BOOL .)
    FUNC            reduce using rule 80 (datatype -> D_BOOL .)
    ,               reduce using rule 80 (datatype -> D_BOOL .)
    )               reduce using rule 80 (datatype -> D_BOOL .)


state 12

    (81) datatype -> D_STRING .
    ID              reduce using rule 81 (datatype -> D_STRING .)
    FUNC            reduce using rule 81 (datatype -> D_STRING .)
    ,               reduce using rule 81 (datatype -> D_STRING .)
    )               reduce using rule 81 (datatype -> D_STRING .)


state 13

    (82) datatype -> D_FLOAT .
    ID              reduce using rule 82 (datatype -> D_FLOAT .)
    FUNC            reduce using rule 82 (datatype -> D_FLOAT .)
    ,               reduce using rule 82 (datatype -> D_FLOAT .)
    )               reduce using rule 82 (datatype -> D_FLOAT .)


state 14

    (83) datatype -> D_INT .
    ID              reduce using rule 83 (datatype -> D_INT .)
    FUNC            reduce using rule 83 (datatype -> D_INT .)
    ,               reduce using rule 83 (datatype -> D_INT .)
    )               reduce using rule 83 (datatype -> D_INT .)


state 15

    (1) program -> PROG ID check_program ; gvars store_gvars functions . gvars store_gvars main
    (2) gvars -> . VAR datatype gvarids store_gtype ; gvars
    (3) gvars -> .
    VAR             shift and go to state 7
    FUNC            reduce using rule 3 (gvars -> .)

    gvars                          shift and go to state 19

state 16

    (13) functions -> datatype . FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    FUNC            shift and go to state 20


state 17

    (2) gvars -> VAR datatype gvarids . store_gtype ; gvars
    (7) store_gtype -> .
    ;               reduce using rule 7 (store_gtype -> .)

    store_gtype                    shift and go to state 21

state 18

    (4) gvarids -> ID .
    (5) gvarids -> ID . , gvarids
    ;               reduce using rule 4 (gvarids -> ID .)
    ,               shift and go to state 22


state 19

    (1) program -> PROG ID check_program ; gvars store_gvars functions gvars . store_gvars main
    (6) store_gvars -> .
    FUNC            reduce using rule 6 (store_gvars -> .)

    store_gvars                    shift and go to state 23

state 20

    (13) functions -> datatype FUNC . ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    ID              shift and go to state 24


state 21

    (2) gvars -> VAR datatype gvarids store_gtype . ; gvars
    ;               shift and go to state 25


state 22

    (5) gvarids -> ID , . gvarids
    (4) gvarids -> . ID
    (5) gvarids -> . ID , gvarids
    ID              shift and go to state 18

    gvarids                        shift and go to state 26

state 23

    (1) program -> PROG ID check_program ; gvars store_gvars functions gvars store_gvars . main
    (20) main -> . FUNC MAIN ( ) store_funcm { vars store_mainv maincontent }
    FUNC            shift and go to state 28

    main                           shift and go to state 27

state 24

    (13) functions -> datatype FUNC ID . ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (               shift and go to state 29


state 25

    (2) gvars -> VAR datatype gvarids store_gtype ; . gvars
    (2) gvars -> . VAR datatype gvarids store_gtype ; gvars
    (3) gvars -> .
  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 7
    VOID            reduce using rule 3 (gvars -> .)
    D_BOOL          reduce using rule 3 (gvars -> .)
    D_STRING        reduce using rule 3 (gvars -> .)
    D_FLOAT         reduce using rule 3 (gvars -> .)
    D_INT           reduce using rule 3 (gvars -> .)
    FUNC            reduce using rule 3 (gvars -> .)

    gvars                          shift and go to state 30

state 26

    (5) gvarids -> ID , gvarids .
    ;               reduce using rule 5 (gvarids -> ID , gvarids .)


state 27

    (1) program -> PROG ID check_program ; gvars store_gvars functions gvars store_gvars main .
    $end            reduce using rule 1 (program -> PROG ID check_program ; gvars store_gvars functions gvars store_gvars main .)


state 28

    (20) main -> FUNC . MAIN ( ) store_funcm { vars store_mainv maincontent }
    MAIN            shift and go to state 31


state 29

    (13) functions -> datatype FUNC ID ( . params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (17) params -> . ID : datatype , params
    (18) params -> . ID : datatype
    (19) params -> .
    ID              shift and go to state 32
    )               reduce using rule 19 (params -> .)

    params                         shift and go to state 33

state 30

    (2) gvars -> VAR datatype gvarids store_gtype ; gvars .
    VOID            reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    D_BOOL          reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    D_STRING        reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    D_FLOAT         reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    D_INT           reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    VAR             reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    FUNC            reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)


state 31

    (20) main -> FUNC MAIN . ( ) store_funcm { vars store_mainv maincontent }
    (               shift and go to state 34


state 32

    (17) params -> ID . : datatype , params
    (18) params -> ID . : datatype
    :               shift and go to state 35


state 33

    (13) functions -> datatype FUNC ID ( params . ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    )               shift and go to state 36


state 34

    (20) main -> FUNC MAIN ( . ) store_funcm { vars store_mainv maincontent }
    )               shift and go to state 37


state 35

    (17) params -> ID : . datatype , params
    (18) params -> ID : . datatype
    (79) datatype -> . VOID
    (80) datatype -> . D_BOOL
    (81) datatype -> . D_STRING
    (82) datatype -> . D_FLOAT
    (83) datatype -> . D_INT
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    datatype                       shift and go to state 38

state 36

    (13) functions -> datatype FUNC ID ( params ) . store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (87) store_funcv -> .
    {               reduce using rule 87 (store_funcv -> .)

    store_funcv                    shift and go to state 39

state 37

    (20) main -> FUNC MAIN ( ) . store_funcm { vars store_mainv maincontent }
    (86) store_funcm -> .
    {               reduce using rule 86 (store_funcm -> .)

    store_funcm                    shift and go to state 40

state 38

    (17) params -> ID : datatype . , params
    (18) params -> ID : datatype .
    ,               shift and go to state 41
    )               reduce using rule 18 (params -> ID : datatype .)


state 39

    (13) functions -> datatype FUNC ID ( params ) store_funcv . store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (88) store_params -> .
    {               reduce using rule 88 (store_params -> .)

    store_params                   shift and go to state 42

state 40

    (20) main -> FUNC MAIN ( ) store_funcm . { vars store_mainv maincontent }
    {               shift and go to state 43


state 41

    (17) params -> ID : datatype , . params
    (17) params -> . ID : datatype , params
    (18) params -> . ID : datatype
    (19) params -> .
    ID              shift and go to state 32
    )               reduce using rule 19 (params -> .)

    params                         shift and go to state 44

state 42

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params . store_init_quad { vars store_local_vars funcontent } close_func functions
    (85) store_init_quad -> .
    {               reduce using rule 85 (store_init_quad -> .)

    store_init_quad                shift and go to state 45

state 43

    (20) main -> FUNC MAIN ( ) store_funcm { . vars store_mainv maincontent }
    (8) vars -> . VAR datatype varids store_type ; vars
    (9) vars -> .
    VAR             shift and go to state 47
    WHILE           reduce using rule 9 (vars -> .)
    INPUT           reduce using rule 9 (vars -> .)
    OUTPUT          reduce using rule 9 (vars -> .)
    IF              reduce using rule 9 (vars -> .)
    RETURN          reduce using rule 9 (vars -> .)
    ID              reduce using rule 9 (vars -> .)
    (               reduce using rule 9 (vars -> .)
    STRING          reduce using rule 9 (vars -> .)
    FLOAT           reduce using rule 9 (vars -> .)
    INT             reduce using rule 9 (vars -> .)
    FALSE           reduce using rule 9 (vars -> .)
    TRUE            reduce using rule 9 (vars -> .)
    }               reduce using rule 9 (vars -> .)

    vars                           shift and go to state 46

state 44

    (17) params -> ID : datatype , params .
    )               reduce using rule 17 (params -> ID : datatype , params .)


state 45

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad . { vars store_local_vars funcontent } close_func functions
    {               shift and go to state 48


state 46

    (20) main -> FUNC MAIN ( ) store_funcm { vars . store_mainv maincontent }
    (90) store_mainv -> .
    WHILE           reduce using rule 90 (store_mainv -> .)
    INPUT           reduce using rule 90 (store_mainv -> .)
    OUTPUT          reduce using rule 90 (store_mainv -> .)
    IF              reduce using rule 90 (store_mainv -> .)
    RETURN          reduce using rule 90 (store_mainv -> .)
    ID              reduce using rule 90 (store_mainv -> .)
    (               reduce using rule 90 (store_mainv -> .)
    STRING          reduce using rule 90 (store_mainv -> .)
    FLOAT           reduce using rule 90 (store_mainv -> .)
    INT             reduce using rule 90 (store_mainv -> .)
    FALSE           reduce using rule 90 (store_mainv -> .)
    TRUE            reduce using rule 90 (store_mainv -> .)
    }               reduce using rule 90 (store_mainv -> .)

    store_mainv                    shift and go to state 49

state 47

    (8) vars -> VAR . datatype varids store_type ; vars
    (79) datatype -> . VOID
    (80) datatype -> . D_BOOL
    (81) datatype -> . D_STRING
    (82) datatype -> . D_FLOAT
    (83) datatype -> . D_INT
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    datatype                       shift and go to state 50

state 48

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { . vars store_local_vars funcontent } close_func functions
    (8) vars -> . VAR datatype varids store_type ; vars
    (9) vars -> .
    VAR             shift and go to state 47
    WHILE           reduce using rule 9 (vars -> .)
    INPUT           reduce using rule 9 (vars -> .)
    OUTPUT          reduce using rule 9 (vars -> .)
    IF              reduce using rule 9 (vars -> .)
    RETURN          reduce using rule 9 (vars -> .)
    ID              reduce using rule 9 (vars -> .)
    (               reduce using rule 9 (vars -> .)
    STRING          reduce using rule 9 (vars -> .)
    FLOAT           reduce using rule 9 (vars -> .)
    INT             reduce using rule 9 (vars -> .)
    FALSE           reduce using rule 9 (vars -> .)
    TRUE            reduce using rule 9 (vars -> .)
    }               reduce using rule 9 (vars -> .)

    vars                           shift and go to state 51

state 49

    (20) main -> FUNC MAIN ( ) store_funcm { vars store_mainv . maincontent }
    (21) maincontent -> .
    (22) maincontent -> . statement maincontent
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 21 (maincontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 21 (maincontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    maincontent                    shift and go to state 53
    statement                      shift and go to state 54
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 50

    (8) vars -> VAR datatype . varids store_type ; vars
    (10) varids -> . ID
    (11) varids -> . ID , varids
    ID              shift and go to state 82

    varids                         shift and go to state 81

state 51

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars . store_local_vars funcontent } close_func functions
    (89) store_local_vars -> .
    WHILE           reduce using rule 89 (store_local_vars -> .)
    INPUT           reduce using rule 89 (store_local_vars -> .)
    OUTPUT          reduce using rule 89 (store_local_vars -> .)
    IF              reduce using rule 89 (store_local_vars -> .)
    RETURN          reduce using rule 89 (store_local_vars -> .)
    ID              reduce using rule 89 (store_local_vars -> .)
    (               reduce using rule 89 (store_local_vars -> .)
    STRING          reduce using rule 89 (store_local_vars -> .)
    FLOAT           reduce using rule 89 (store_local_vars -> .)
    INT             reduce using rule 89 (store_local_vars -> .)
    FALSE           reduce using rule 89 (store_local_vars -> .)
    TRUE            reduce using rule 89 (store_local_vars -> .)
    }               reduce using rule 89 (store_local_vars -> .)

    store_local_vars               shift and go to state 83

state 52

    (63) factor -> ( . store_op expr ) store_op
    (91) store_op -> .
    (               reduce using rule 91 (store_op -> .)
    ID              reduce using rule 91 (store_op -> .)
    STRING          reduce using rule 91 (store_op -> .)
    FLOAT           reduce using rule 91 (store_op -> .)
    INT             reduce using rule 91 (store_op -> .)
    FALSE           reduce using rule 91 (store_op -> .)
    TRUE            reduce using rule 91 (store_op -> .)

    store_op                       shift and go to state 84

state 53

    (20) main -> FUNC MAIN ( ) store_funcm { vars store_mainv maincontent . }
    }               shift and go to state 85


state 54

    (22) maincontent -> statement . maincontent
    (31) statement -> statement . statement
    (21) maincontent -> .
    (22) maincontent -> . statement maincontent
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 21 (maincontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 21 (maincontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    statement                      shift and go to state 86
    maincontent                    shift and go to state 87
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 55

    (23) statement -> loop . unload_pv
    (94) unload_pv -> .
    WHILE           reduce using rule 94 (unload_pv -> .)
    INPUT           reduce using rule 94 (unload_pv -> .)
    OUTPUT          reduce using rule 94 (unload_pv -> .)
    IF              reduce using rule 94 (unload_pv -> .)
    RETURN          reduce using rule 94 (unload_pv -> .)
    ID              reduce using rule 94 (unload_pv -> .)
    (               reduce using rule 94 (unload_pv -> .)
    STRING          reduce using rule 94 (unload_pv -> .)
    FLOAT           reduce using rule 94 (unload_pv -> .)
    INT             reduce using rule 94 (unload_pv -> .)
    FALSE           reduce using rule 94 (unload_pv -> .)
    TRUE            reduce using rule 94 (unload_pv -> .)
    }               reduce using rule 94 (unload_pv -> .)

    unload_pv                      shift and go to state 88

state 56

    (24) statement -> input . unload_pv
    (94) unload_pv -> .
    WHILE           reduce using rule 94 (unload_pv -> .)
    INPUT           reduce using rule 94 (unload_pv -> .)
    OUTPUT          reduce using rule 94 (unload_pv -> .)
    IF              reduce using rule 94 (unload_pv -> .)
    RETURN          reduce using rule 94 (unload_pv -> .)
    ID              reduce using rule 94 (unload_pv -> .)
    (               reduce using rule 94 (unload_pv -> .)
    STRING          reduce using rule 94 (unload_pv -> .)
    FLOAT           reduce using rule 94 (unload_pv -> .)
    INT             reduce using rule 94 (unload_pv -> .)
    FALSE           reduce using rule 94 (unload_pv -> .)
    TRUE            reduce using rule 94 (unload_pv -> .)
    }               reduce using rule 94 (unload_pv -> .)

    unload_pv                      shift and go to state 89

state 57

    (25) statement -> output . unload_pv
    (94) unload_pv -> .
    WHILE           reduce using rule 94 (unload_pv -> .)
    INPUT           reduce using rule 94 (unload_pv -> .)
    OUTPUT          reduce using rule 94 (unload_pv -> .)
    IF              reduce using rule 94 (unload_pv -> .)
    RETURN          reduce using rule 94 (unload_pv -> .)
    ID              reduce using rule 94 (unload_pv -> .)
    (               reduce using rule 94 (unload_pv -> .)
    STRING          reduce using rule 94 (unload_pv -> .)
    FLOAT           reduce using rule 94 (unload_pv -> .)
    INT             reduce using rule 94 (unload_pv -> .)
    FALSE           reduce using rule 94 (unload_pv -> .)
    TRUE            reduce using rule 94 (unload_pv -> .)
    }               reduce using rule 94 (unload_pv -> .)

    unload_pv                      shift and go to state 90

state 58

    (26) statement -> ifelse . unload_pv
    (94) unload_pv -> .
    WHILE           reduce using rule 94 (unload_pv -> .)
    INPUT           reduce using rule 94 (unload_pv -> .)
    OUTPUT          reduce using rule 94 (unload_pv -> .)
    IF              reduce using rule 94 (unload_pv -> .)
    RETURN          reduce using rule 94 (unload_pv -> .)
    ID              reduce using rule 94 (unload_pv -> .)
    (               reduce using rule 94 (unload_pv -> .)
    STRING          reduce using rule 94 (unload_pv -> .)
    FLOAT           reduce using rule 94 (unload_pv -> .)
    INT             reduce using rule 94 (unload_pv -> .)
    FALSE           reduce using rule 94 (unload_pv -> .)
    TRUE            reduce using rule 94 (unload_pv -> .)
    }               reduce using rule 94 (unload_pv -> .)

    unload_pv                      shift and go to state 91

state 59

    (27) statement -> returns . unload_pv ;
    (94) unload_pv -> .
    ;               reduce using rule 94 (unload_pv -> .)

    unload_pv                      shift and go to state 92

state 60

    (28) statement -> expr . ;
    ;               shift and go to state 93


state 61

    (29) statement -> var_assign . unload_pv
    (94) unload_pv -> .
    WHILE           reduce using rule 94 (unload_pv -> .)
    INPUT           reduce using rule 94 (unload_pv -> .)
    OUTPUT          reduce using rule 94 (unload_pv -> .)
    IF              reduce using rule 94 (unload_pv -> .)
    RETURN          reduce using rule 94 (unload_pv -> .)
    ID              reduce using rule 94 (unload_pv -> .)
    (               reduce using rule 94 (unload_pv -> .)
    STRING          reduce using rule 94 (unload_pv -> .)
    FLOAT           reduce using rule 94 (unload_pv -> .)
    INT             reduce using rule 94 (unload_pv -> .)
    FALSE           reduce using rule 94 (unload_pv -> .)
    TRUE            reduce using rule 94 (unload_pv -> .)
    }               reduce using rule 94 (unload_pv -> .)

    unload_pv                      shift and go to state 94

state 62

    (40) loop -> WHILE . store_jump ( expr ) store_gotof { statement } end_loop
    (105) store_jump -> .
    (               reduce using rule 105 (store_jump -> .)

    store_jump                     shift and go to state 95

state 63

    (39) input -> INPUT . ( ID store_oper ) ;
    (               shift and go to state 96


state 64

    (32) var_assign -> ID . store_oper = expr ;
    (74) callfunc -> ID . verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (68) compoundx -> ID . store_oper
    (92) store_oper -> .
    (100) verify_func -> .
    =               reduce using rule 92 (store_oper -> .)
    /               reduce using rule 92 (store_oper -> .)
    *               reduce using rule 92 (store_oper -> .)
    -               reduce using rule 92 (store_oper -> .)
    +               reduce using rule 92 (store_oper -> .)
    OR              reduce using rule 92 (store_oper -> .)
    EQEQ            reduce using rule 92 (store_oper -> .)
    DIFF            reduce using rule 92 (store_oper -> .)
    AND             reduce using rule 92 (store_oper -> .)
    <               reduce using rule 92 (store_oper -> .)
    LOETHAN         reduce using rule 92 (store_oper -> .)
    >               reduce using rule 92 (store_oper -> .)
    GOETHAN         reduce using rule 92 (store_oper -> .)
    ;               reduce using rule 92 (store_oper -> .)
    (               reduce using rule 100 (verify_func -> .)

    store_oper                     shift and go to state 97
    verify_func                    shift and go to state 98

state 65

    (36) output -> OUTPUT . ( expr outex ) ;
    (               shift and go to state 99


state 66

    (34) ifelse -> IF . ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> IF . ( expr ) store_gotof { statement } store_endif
    (               shift and go to state 100


state 67

    (33) returns -> RETURN . expr store_rquad
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 101
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 68

    (41) expr -> arexp . exprx
    (42) exprx -> .
    (43) exprx -> . exprop arexp
    (44) exprop -> . OR
    (45) exprop -> . EQEQ
    (46) exprop -> . DIFF
    (47) exprop -> . AND
    (48) exprop -> . <
    (49) exprop -> . LOETHAN
    (50) exprop -> . >
    (51) exprop -> . GOETHAN
    ;               reduce using rule 42 (exprx -> .)
    )               reduce using rule 42 (exprx -> .)
    ,               reduce using rule 42 (exprx -> .)
    OR              shift and go to state 105
    EQEQ            shift and go to state 106
    DIFF            shift and go to state 107
    AND             shift and go to state 108
    <               shift and go to state 109
    LOETHAN         shift and go to state 110
    >               shift and go to state 111
    GOETHAN         shift and go to state 112

    exprx                          shift and go to state 103
    exprop                         shift and go to state 104

state 69

    (52) arexp -> term . arexpextra
    (53) arexp -> term .
    (54) arexpextra -> .
    (55) arexpextra -> . - term arexpextra
    (56) arexpextra -> . + term arexpextra
  ! reduce/reduce conflict for OR resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for EQEQ resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for DIFF resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for AND resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for < resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for LOETHAN resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for > resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for GOETHAN resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for ; resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for ) resolved using rule 53 (arexp -> term .)
  ! reduce/reduce conflict for , resolved using rule 53 (arexp -> term .)
    OR              reduce using rule 53 (arexp -> term .)
    EQEQ            reduce using rule 53 (arexp -> term .)
    DIFF            reduce using rule 53 (arexp -> term .)
    AND             reduce using rule 53 (arexp -> term .)
    <               reduce using rule 53 (arexp -> term .)
    LOETHAN         reduce using rule 53 (arexp -> term .)
    >               reduce using rule 53 (arexp -> term .)
    GOETHAN         reduce using rule 53 (arexp -> term .)
    ;               reduce using rule 53 (arexp -> term .)
    )               reduce using rule 53 (arexp -> term .)
    ,               reduce using rule 53 (arexp -> term .)
    -               shift and go to state 114
    +               shift and go to state 115

    arexpextra                     shift and go to state 113

state 70

    (57) term -> factor . termx
    (58) term -> factor .
    (59) termx -> .
    (60) termx -> . / factor termx
    (61) termx -> . * factor termx
  ! reduce/reduce conflict for - resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for + resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for OR resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for EQEQ resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for DIFF resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for AND resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for < resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for LOETHAN resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for > resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for GOETHAN resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for ; resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for ) resolved using rule 58 (term -> factor .)
  ! reduce/reduce conflict for , resolved using rule 58 (term -> factor .)
    -               reduce using rule 58 (term -> factor .)
    +               reduce using rule 58 (term -> factor .)
    OR              reduce using rule 58 (term -> factor .)
    EQEQ            reduce using rule 58 (term -> factor .)
    DIFF            reduce using rule 58 (term -> factor .)
    AND             reduce using rule 58 (term -> factor .)
    <               reduce using rule 58 (term -> factor .)
    LOETHAN         reduce using rule 58 (term -> factor .)
    >               reduce using rule 58 (term -> factor .)
    GOETHAN         reduce using rule 58 (term -> factor .)
    ;               reduce using rule 58 (term -> factor .)
    )               reduce using rule 58 (term -> factor .)
    ,               reduce using rule 58 (term -> factor .)
    /               shift and go to state 117
    *               shift and go to state 118

    termx                          shift and go to state 116

state 71

    (62) factor -> element .
    /               reduce using rule 62 (factor -> element .)
    *               reduce using rule 62 (factor -> element .)
    -               reduce using rule 62 (factor -> element .)
    +               reduce using rule 62 (factor -> element .)
    OR              reduce using rule 62 (factor -> element .)
    EQEQ            reduce using rule 62 (factor -> element .)
    DIFF            reduce using rule 62 (factor -> element .)
    AND             reduce using rule 62 (factor -> element .)
    <               reduce using rule 62 (factor -> element .)
    LOETHAN         reduce using rule 62 (factor -> element .)
    >               reduce using rule 62 (factor -> element .)
    GOETHAN         reduce using rule 62 (factor -> element .)
    ;               reduce using rule 62 (factor -> element .)
    )               reduce using rule 62 (factor -> element .)
    ,               reduce using rule 62 (factor -> element .)


state 72

    (64) element -> callfunc . store_oper
    (92) store_oper -> .
    /               reduce using rule 92 (store_oper -> .)
    *               reduce using rule 92 (store_oper -> .)
    -               reduce using rule 92 (store_oper -> .)
    +               reduce using rule 92 (store_oper -> .)
    OR              reduce using rule 92 (store_oper -> .)
    EQEQ            reduce using rule 92 (store_oper -> .)
    DIFF            reduce using rule 92 (store_oper -> .)
    AND             reduce using rule 92 (store_oper -> .)
    <               reduce using rule 92 (store_oper -> .)
    LOETHAN         reduce using rule 92 (store_oper -> .)
    >               reduce using rule 92 (store_oper -> .)
    GOETHAN         reduce using rule 92 (store_oper -> .)
    ;               reduce using rule 92 (store_oper -> .)
    )               reduce using rule 92 (store_oper -> .)
    ,               reduce using rule 92 (store_oper -> .)

    store_oper                     shift and go to state 119

state 73

    (65) element -> compound . store_oper
    (92) store_oper -> .
    /               reduce using rule 92 (store_oper -> .)
    *               reduce using rule 92 (store_oper -> .)
    -               reduce using rule 92 (store_oper -> .)
    +               reduce using rule 92 (store_oper -> .)
    OR              reduce using rule 92 (store_oper -> .)
    EQEQ            reduce using rule 92 (store_oper -> .)
    DIFF            reduce using rule 92 (store_oper -> .)
    AND             reduce using rule 92 (store_oper -> .)
    <               reduce using rule 92 (store_oper -> .)
    LOETHAN         reduce using rule 92 (store_oper -> .)
    >               reduce using rule 92 (store_oper -> .)
    GOETHAN         reduce using rule 92 (store_oper -> .)
    ;               reduce using rule 92 (store_oper -> .)
    )               reduce using rule 92 (store_oper -> .)
    ,               reduce using rule 92 (store_oper -> .)

    store_oper                     shift and go to state 120

state 74

    (66) element -> const . store_const
    (93) store_const -> .
    /               reduce using rule 93 (store_const -> .)
    *               reduce using rule 93 (store_const -> .)
    -               reduce using rule 93 (store_const -> .)
    +               reduce using rule 93 (store_const -> .)
    OR              reduce using rule 93 (store_const -> .)
    EQEQ            reduce using rule 93 (store_const -> .)
    DIFF            reduce using rule 93 (store_const -> .)
    AND             reduce using rule 93 (store_const -> .)
    <               reduce using rule 93 (store_const -> .)
    LOETHAN         reduce using rule 93 (store_const -> .)
    >               reduce using rule 93 (store_const -> .)
    GOETHAN         reduce using rule 93 (store_const -> .)
    ;               reduce using rule 93 (store_const -> .)
    )               reduce using rule 93 (store_const -> .)
    ,               reduce using rule 93 (store_const -> .)

    store_const                    shift and go to state 121

state 75

    (67) compound -> compoundx .
    /               reduce using rule 67 (compound -> compoundx .)
    *               reduce using rule 67 (compound -> compoundx .)
    -               reduce using rule 67 (compound -> compoundx .)
    +               reduce using rule 67 (compound -> compoundx .)
    OR              reduce using rule 67 (compound -> compoundx .)
    EQEQ            reduce using rule 67 (compound -> compoundx .)
    DIFF            reduce using rule 67 (compound -> compoundx .)
    AND             reduce using rule 67 (compound -> compoundx .)
    <               reduce using rule 67 (compound -> compoundx .)
    LOETHAN         reduce using rule 67 (compound -> compoundx .)
    >               reduce using rule 67 (compound -> compoundx .)
    GOETHAN         reduce using rule 67 (compound -> compoundx .)
    ;               reduce using rule 67 (compound -> compoundx .)
    )               reduce using rule 67 (compound -> compoundx .)
    ,               reduce using rule 67 (compound -> compoundx .)


state 76

    (69) const -> STRING .
    /               reduce using rule 69 (const -> STRING .)
    *               reduce using rule 69 (const -> STRING .)
    -               reduce using rule 69 (const -> STRING .)
    +               reduce using rule 69 (const -> STRING .)
    OR              reduce using rule 69 (const -> STRING .)
    EQEQ            reduce using rule 69 (const -> STRING .)
    DIFF            reduce using rule 69 (const -> STRING .)
    AND             reduce using rule 69 (const -> STRING .)
    <               reduce using rule 69 (const -> STRING .)
    LOETHAN         reduce using rule 69 (const -> STRING .)
    >               reduce using rule 69 (const -> STRING .)
    GOETHAN         reduce using rule 69 (const -> STRING .)
    ;               reduce using rule 69 (const -> STRING .)
    )               reduce using rule 69 (const -> STRING .)
    ,               reduce using rule 69 (const -> STRING .)


state 77

    (70) const -> FLOAT .
    /               reduce using rule 70 (const -> FLOAT .)
    *               reduce using rule 70 (const -> FLOAT .)
    -               reduce using rule 70 (const -> FLOAT .)
    +               reduce using rule 70 (const -> FLOAT .)
    OR              reduce using rule 70 (const -> FLOAT .)
    EQEQ            reduce using rule 70 (const -> FLOAT .)
    DIFF            reduce using rule 70 (const -> FLOAT .)
    AND             reduce using rule 70 (const -> FLOAT .)
    <               reduce using rule 70 (const -> FLOAT .)
    LOETHAN         reduce using rule 70 (const -> FLOAT .)
    >               reduce using rule 70 (const -> FLOAT .)
    GOETHAN         reduce using rule 70 (const -> FLOAT .)
    ;               reduce using rule 70 (const -> FLOAT .)
    )               reduce using rule 70 (const -> FLOAT .)
    ,               reduce using rule 70 (const -> FLOAT .)


state 78

    (71) const -> INT .
    /               reduce using rule 71 (const -> INT .)
    *               reduce using rule 71 (const -> INT .)
    -               reduce using rule 71 (const -> INT .)
    +               reduce using rule 71 (const -> INT .)
    OR              reduce using rule 71 (const -> INT .)
    EQEQ            reduce using rule 71 (const -> INT .)
    DIFF            reduce using rule 71 (const -> INT .)
    AND             reduce using rule 71 (const -> INT .)
    <               reduce using rule 71 (const -> INT .)
    LOETHAN         reduce using rule 71 (const -> INT .)
    >               reduce using rule 71 (const -> INT .)
    GOETHAN         reduce using rule 71 (const -> INT .)
    ;               reduce using rule 71 (const -> INT .)
    )               reduce using rule 71 (const -> INT .)
    ,               reduce using rule 71 (const -> INT .)


state 79

    (72) const -> FALSE .
    /               reduce using rule 72 (const -> FALSE .)
    *               reduce using rule 72 (const -> FALSE .)
    -               reduce using rule 72 (const -> FALSE .)
    +               reduce using rule 72 (const -> FALSE .)
    OR              reduce using rule 72 (const -> FALSE .)
    EQEQ            reduce using rule 72 (const -> FALSE .)
    DIFF            reduce using rule 72 (const -> FALSE .)
    AND             reduce using rule 72 (const -> FALSE .)
    <               reduce using rule 72 (const -> FALSE .)
    LOETHAN         reduce using rule 72 (const -> FALSE .)
    >               reduce using rule 72 (const -> FALSE .)
    GOETHAN         reduce using rule 72 (const -> FALSE .)
    ;               reduce using rule 72 (const -> FALSE .)
    )               reduce using rule 72 (const -> FALSE .)
    ,               reduce using rule 72 (const -> FALSE .)


state 80

    (73) const -> TRUE .
    /               reduce using rule 73 (const -> TRUE .)
    *               reduce using rule 73 (const -> TRUE .)
    -               reduce using rule 73 (const -> TRUE .)
    +               reduce using rule 73 (const -> TRUE .)
    OR              reduce using rule 73 (const -> TRUE .)
    EQEQ            reduce using rule 73 (const -> TRUE .)
    DIFF            reduce using rule 73 (const -> TRUE .)
    AND             reduce using rule 73 (const -> TRUE .)
    <               reduce using rule 73 (const -> TRUE .)
    LOETHAN         reduce using rule 73 (const -> TRUE .)
    >               reduce using rule 73 (const -> TRUE .)
    GOETHAN         reduce using rule 73 (const -> TRUE .)
    ;               reduce using rule 73 (const -> TRUE .)
    )               reduce using rule 73 (const -> TRUE .)
    ,               reduce using rule 73 (const -> TRUE .)


state 81

    (8) vars -> VAR datatype varids . store_type ; vars
    (12) store_type -> .
    ;               reduce using rule 12 (store_type -> .)

    store_type                     shift and go to state 122

state 82

    (10) varids -> ID .
    (11) varids -> ID . , varids
    ;               reduce using rule 10 (varids -> ID .)
    ,               shift and go to state 123


state 83

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars . funcontent } close_func functions
    (15) funcontent -> .
    (16) funcontent -> . statement funcontent
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 15 (funcontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 15 (funcontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    funcontent                     shift and go to state 124
    statement                      shift and go to state 125
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 84

    (63) factor -> ( store_op . expr ) store_op
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 126
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 85

    (20) main -> FUNC MAIN ( ) store_funcm { vars store_mainv maincontent } .
    $end            reduce using rule 20 (main -> FUNC MAIN ( ) store_funcm { vars store_mainv maincontent } .)


state 86

    (31) statement -> statement statement .
    (22) maincontent -> statement . maincontent
    (31) statement -> statement . statement
    (21) maincontent -> .
    (22) maincontent -> . statement maincontent
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 21 (maincontent -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for INPUT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for ( resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for STRING resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for INT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for } resolved using rule 21 (maincontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 21 (maincontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    statement                      shift and go to state 86
    maincontent                    shift and go to state 87
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 87

    (22) maincontent -> statement maincontent .
    }               reduce using rule 22 (maincontent -> statement maincontent .)


state 88

    (23) statement -> loop unload_pv .
    WHILE           reduce using rule 23 (statement -> loop unload_pv .)
    INPUT           reduce using rule 23 (statement -> loop unload_pv .)
    OUTPUT          reduce using rule 23 (statement -> loop unload_pv .)
    IF              reduce using rule 23 (statement -> loop unload_pv .)
    RETURN          reduce using rule 23 (statement -> loop unload_pv .)
    ID              reduce using rule 23 (statement -> loop unload_pv .)
    (               reduce using rule 23 (statement -> loop unload_pv .)
    STRING          reduce using rule 23 (statement -> loop unload_pv .)
    FLOAT           reduce using rule 23 (statement -> loop unload_pv .)
    INT             reduce using rule 23 (statement -> loop unload_pv .)
    FALSE           reduce using rule 23 (statement -> loop unload_pv .)
    TRUE            reduce using rule 23 (statement -> loop unload_pv .)
    }               reduce using rule 23 (statement -> loop unload_pv .)


state 89

    (24) statement -> input unload_pv .
    WHILE           reduce using rule 24 (statement -> input unload_pv .)
    INPUT           reduce using rule 24 (statement -> input unload_pv .)
    OUTPUT          reduce using rule 24 (statement -> input unload_pv .)
    IF              reduce using rule 24 (statement -> input unload_pv .)
    RETURN          reduce using rule 24 (statement -> input unload_pv .)
    ID              reduce using rule 24 (statement -> input unload_pv .)
    (               reduce using rule 24 (statement -> input unload_pv .)
    STRING          reduce using rule 24 (statement -> input unload_pv .)
    FLOAT           reduce using rule 24 (statement -> input unload_pv .)
    INT             reduce using rule 24 (statement -> input unload_pv .)
    FALSE           reduce using rule 24 (statement -> input unload_pv .)
    TRUE            reduce using rule 24 (statement -> input unload_pv .)
    }               reduce using rule 24 (statement -> input unload_pv .)


state 90

    (25) statement -> output unload_pv .
    WHILE           reduce using rule 25 (statement -> output unload_pv .)
    INPUT           reduce using rule 25 (statement -> output unload_pv .)
    OUTPUT          reduce using rule 25 (statement -> output unload_pv .)
    IF              reduce using rule 25 (statement -> output unload_pv .)
    RETURN          reduce using rule 25 (statement -> output unload_pv .)
    ID              reduce using rule 25 (statement -> output unload_pv .)
    (               reduce using rule 25 (statement -> output unload_pv .)
    STRING          reduce using rule 25 (statement -> output unload_pv .)
    FLOAT           reduce using rule 25 (statement -> output unload_pv .)
    INT             reduce using rule 25 (statement -> output unload_pv .)
    FALSE           reduce using rule 25 (statement -> output unload_pv .)
    TRUE            reduce using rule 25 (statement -> output unload_pv .)
    }               reduce using rule 25 (statement -> output unload_pv .)


state 91

    (26) statement -> ifelse unload_pv .
    WHILE           reduce using rule 26 (statement -> ifelse unload_pv .)
    INPUT           reduce using rule 26 (statement -> ifelse unload_pv .)
    OUTPUT          reduce using rule 26 (statement -> ifelse unload_pv .)
    IF              reduce using rule 26 (statement -> ifelse unload_pv .)
    RETURN          reduce using rule 26 (statement -> ifelse unload_pv .)
    ID              reduce using rule 26 (statement -> ifelse unload_pv .)
    (               reduce using rule 26 (statement -> ifelse unload_pv .)
    STRING          reduce using rule 26 (statement -> ifelse unload_pv .)
    FLOAT           reduce using rule 26 (statement -> ifelse unload_pv .)
    INT             reduce using rule 26 (statement -> ifelse unload_pv .)
    FALSE           reduce using rule 26 (statement -> ifelse unload_pv .)
    TRUE            reduce using rule 26 (statement -> ifelse unload_pv .)
    }               reduce using rule 26 (statement -> ifelse unload_pv .)


state 92

    (27) statement -> returns unload_pv . ;
    ;               shift and go to state 127


state 93

    (28) statement -> expr ; .
    WHILE           reduce using rule 28 (statement -> expr ; .)
    INPUT           reduce using rule 28 (statement -> expr ; .)
    OUTPUT          reduce using rule 28 (statement -> expr ; .)
    IF              reduce using rule 28 (statement -> expr ; .)
    RETURN          reduce using rule 28 (statement -> expr ; .)
    ID              reduce using rule 28 (statement -> expr ; .)
    (               reduce using rule 28 (statement -> expr ; .)
    STRING          reduce using rule 28 (statement -> expr ; .)
    FLOAT           reduce using rule 28 (statement -> expr ; .)
    INT             reduce using rule 28 (statement -> expr ; .)
    FALSE           reduce using rule 28 (statement -> expr ; .)
    TRUE            reduce using rule 28 (statement -> expr ; .)
    }               reduce using rule 28 (statement -> expr ; .)


state 94

    (29) statement -> var_assign unload_pv .
    WHILE           reduce using rule 29 (statement -> var_assign unload_pv .)
    INPUT           reduce using rule 29 (statement -> var_assign unload_pv .)
    OUTPUT          reduce using rule 29 (statement -> var_assign unload_pv .)
    IF              reduce using rule 29 (statement -> var_assign unload_pv .)
    RETURN          reduce using rule 29 (statement -> var_assign unload_pv .)
    ID              reduce using rule 29 (statement -> var_assign unload_pv .)
    (               reduce using rule 29 (statement -> var_assign unload_pv .)
    STRING          reduce using rule 29 (statement -> var_assign unload_pv .)
    FLOAT           reduce using rule 29 (statement -> var_assign unload_pv .)
    INT             reduce using rule 29 (statement -> var_assign unload_pv .)
    FALSE           reduce using rule 29 (statement -> var_assign unload_pv .)
    TRUE            reduce using rule 29 (statement -> var_assign unload_pv .)
    }               reduce using rule 29 (statement -> var_assign unload_pv .)


state 95

    (40) loop -> WHILE store_jump . ( expr ) store_gotof { statement } end_loop
    (               shift and go to state 128


state 96

    (39) input -> INPUT ( . ID store_oper ) ;
    ID              shift and go to state 129


state 97

    (32) var_assign -> ID store_oper . = expr ;
    (68) compoundx -> ID store_oper .
    =               shift and go to state 130
    /               reduce using rule 68 (compoundx -> ID store_oper .)
    *               reduce using rule 68 (compoundx -> ID store_oper .)
    -               reduce using rule 68 (compoundx -> ID store_oper .)
    +               reduce using rule 68 (compoundx -> ID store_oper .)
    OR              reduce using rule 68 (compoundx -> ID store_oper .)
    EQEQ            reduce using rule 68 (compoundx -> ID store_oper .)
    DIFF            reduce using rule 68 (compoundx -> ID store_oper .)
    AND             reduce using rule 68 (compoundx -> ID store_oper .)
    <               reduce using rule 68 (compoundx -> ID store_oper .)
    LOETHAN         reduce using rule 68 (compoundx -> ID store_oper .)
    >               reduce using rule 68 (compoundx -> ID store_oper .)
    GOETHAN         reduce using rule 68 (compoundx -> ID store_oper .)
    ;               reduce using rule 68 (compoundx -> ID store_oper .)


state 98

    (74) callfunc -> ID verify_func . add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (101) add_fstack -> .
    (               reduce using rule 101 (add_fstack -> .)

    add_fstack                     shift and go to state 131

state 99

    (36) output -> OUTPUT ( . expr outex ) ;
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 132
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 100

    (34) ifelse -> IF ( . expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> IF ( . expr ) store_gotof { statement } store_endif
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 133
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 101

    (33) returns -> RETURN expr . store_rquad
    (95) store_rquad -> .
    ;               reduce using rule 95 (store_rquad -> .)

    store_rquad                    shift and go to state 134

state 102

    (74) callfunc -> ID . verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (68) compoundx -> ID . store_oper
    (100) verify_func -> .
    (92) store_oper -> .
    (               reduce using rule 100 (verify_func -> .)
    /               reduce using rule 92 (store_oper -> .)
    *               reduce using rule 92 (store_oper -> .)
    -               reduce using rule 92 (store_oper -> .)
    +               reduce using rule 92 (store_oper -> .)
    OR              reduce using rule 92 (store_oper -> .)
    EQEQ            reduce using rule 92 (store_oper -> .)
    DIFF            reduce using rule 92 (store_oper -> .)
    AND             reduce using rule 92 (store_oper -> .)
    <               reduce using rule 92 (store_oper -> .)
    LOETHAN         reduce using rule 92 (store_oper -> .)
    >               reduce using rule 92 (store_oper -> .)
    GOETHAN         reduce using rule 92 (store_oper -> .)
    ;               reduce using rule 92 (store_oper -> .)
    )               reduce using rule 92 (store_oper -> .)
    ,               reduce using rule 92 (store_oper -> .)

    verify_func                    shift and go to state 98
    store_oper                     shift and go to state 135

state 103

    (41) expr -> arexp exprx .
    ;               reduce using rule 41 (expr -> arexp exprx .)
    )               reduce using rule 41 (expr -> arexp exprx .)
    ,               reduce using rule 41 (expr -> arexp exprx .)


state 104

    (43) exprx -> exprop . arexp
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    arexp                          shift and go to state 136
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 105

    (44) exprop -> OR .
    (               reduce using rule 44 (exprop -> OR .)
    ID              reduce using rule 44 (exprop -> OR .)
    STRING          reduce using rule 44 (exprop -> OR .)
    FLOAT           reduce using rule 44 (exprop -> OR .)
    INT             reduce using rule 44 (exprop -> OR .)
    FALSE           reduce using rule 44 (exprop -> OR .)
    TRUE            reduce using rule 44 (exprop -> OR .)


state 106

    (45) exprop -> EQEQ .
    (               reduce using rule 45 (exprop -> EQEQ .)
    ID              reduce using rule 45 (exprop -> EQEQ .)
    STRING          reduce using rule 45 (exprop -> EQEQ .)
    FLOAT           reduce using rule 45 (exprop -> EQEQ .)
    INT             reduce using rule 45 (exprop -> EQEQ .)
    FALSE           reduce using rule 45 (exprop -> EQEQ .)
    TRUE            reduce using rule 45 (exprop -> EQEQ .)


state 107

    (46) exprop -> DIFF .
    (               reduce using rule 46 (exprop -> DIFF .)
    ID              reduce using rule 46 (exprop -> DIFF .)
    STRING          reduce using rule 46 (exprop -> DIFF .)
    FLOAT           reduce using rule 46 (exprop -> DIFF .)
    INT             reduce using rule 46 (exprop -> DIFF .)
    FALSE           reduce using rule 46 (exprop -> DIFF .)
    TRUE            reduce using rule 46 (exprop -> DIFF .)


state 108

    (47) exprop -> AND .
    (               reduce using rule 47 (exprop -> AND .)
    ID              reduce using rule 47 (exprop -> AND .)
    STRING          reduce using rule 47 (exprop -> AND .)
    FLOAT           reduce using rule 47 (exprop -> AND .)
    INT             reduce using rule 47 (exprop -> AND .)
    FALSE           reduce using rule 47 (exprop -> AND .)
    TRUE            reduce using rule 47 (exprop -> AND .)


state 109

    (48) exprop -> < .
    (               reduce using rule 48 (exprop -> < .)
    ID              reduce using rule 48 (exprop -> < .)
    STRING          reduce using rule 48 (exprop -> < .)
    FLOAT           reduce using rule 48 (exprop -> < .)
    INT             reduce using rule 48 (exprop -> < .)
    FALSE           reduce using rule 48 (exprop -> < .)
    TRUE            reduce using rule 48 (exprop -> < .)


state 110

    (49) exprop -> LOETHAN .
    (               reduce using rule 49 (exprop -> LOETHAN .)
    ID              reduce using rule 49 (exprop -> LOETHAN .)
    STRING          reduce using rule 49 (exprop -> LOETHAN .)
    FLOAT           reduce using rule 49 (exprop -> LOETHAN .)
    INT             reduce using rule 49 (exprop -> LOETHAN .)
    FALSE           reduce using rule 49 (exprop -> LOETHAN .)
    TRUE            reduce using rule 49 (exprop -> LOETHAN .)


state 111

    (50) exprop -> > .
    (               reduce using rule 50 (exprop -> > .)
    ID              reduce using rule 50 (exprop -> > .)
    STRING          reduce using rule 50 (exprop -> > .)
    FLOAT           reduce using rule 50 (exprop -> > .)
    INT             reduce using rule 50 (exprop -> > .)
    FALSE           reduce using rule 50 (exprop -> > .)
    TRUE            reduce using rule 50 (exprop -> > .)


state 112

    (51) exprop -> GOETHAN .
    (               reduce using rule 51 (exprop -> GOETHAN .)
    ID              reduce using rule 51 (exprop -> GOETHAN .)
    STRING          reduce using rule 51 (exprop -> GOETHAN .)
    FLOAT           reduce using rule 51 (exprop -> GOETHAN .)
    INT             reduce using rule 51 (exprop -> GOETHAN .)
    FALSE           reduce using rule 51 (exprop -> GOETHAN .)
    TRUE            reduce using rule 51 (exprop -> GOETHAN .)


state 113

    (52) arexp -> term arexpextra .
    OR              reduce using rule 52 (arexp -> term arexpextra .)
    EQEQ            reduce using rule 52 (arexp -> term arexpextra .)
    DIFF            reduce using rule 52 (arexp -> term arexpextra .)
    AND             reduce using rule 52 (arexp -> term arexpextra .)
    <               reduce using rule 52 (arexp -> term arexpextra .)
    LOETHAN         reduce using rule 52 (arexp -> term arexpextra .)
    >               reduce using rule 52 (arexp -> term arexpextra .)
    GOETHAN         reduce using rule 52 (arexp -> term arexpextra .)
    ;               reduce using rule 52 (arexp -> term arexpextra .)
    )               reduce using rule 52 (arexp -> term arexpextra .)
    ,               reduce using rule 52 (arexp -> term arexpextra .)


state 114

    (55) arexpextra -> - . term arexpextra
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    term                           shift and go to state 137
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 115

    (56) arexpextra -> + . term arexpextra
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    term                           shift and go to state 138
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 116

    (57) term -> factor termx .
    -               reduce using rule 57 (term -> factor termx .)
    +               reduce using rule 57 (term -> factor termx .)
    OR              reduce using rule 57 (term -> factor termx .)
    EQEQ            reduce using rule 57 (term -> factor termx .)
    DIFF            reduce using rule 57 (term -> factor termx .)
    AND             reduce using rule 57 (term -> factor termx .)
    <               reduce using rule 57 (term -> factor termx .)
    LOETHAN         reduce using rule 57 (term -> factor termx .)
    >               reduce using rule 57 (term -> factor termx .)
    GOETHAN         reduce using rule 57 (term -> factor termx .)
    ;               reduce using rule 57 (term -> factor termx .)
    )               reduce using rule 57 (term -> factor termx .)
    ,               reduce using rule 57 (term -> factor termx .)


state 117

    (60) termx -> / . factor termx
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    factor                         shift and go to state 139
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 118

    (61) termx -> * . factor termx
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    factor                         shift and go to state 140
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 119

    (64) element -> callfunc store_oper .
    /               reduce using rule 64 (element -> callfunc store_oper .)
    *               reduce using rule 64 (element -> callfunc store_oper .)
    -               reduce using rule 64 (element -> callfunc store_oper .)
    +               reduce using rule 64 (element -> callfunc store_oper .)
    OR              reduce using rule 64 (element -> callfunc store_oper .)
    EQEQ            reduce using rule 64 (element -> callfunc store_oper .)
    DIFF            reduce using rule 64 (element -> callfunc store_oper .)
    AND             reduce using rule 64 (element -> callfunc store_oper .)
    <               reduce using rule 64 (element -> callfunc store_oper .)
    LOETHAN         reduce using rule 64 (element -> callfunc store_oper .)
    >               reduce using rule 64 (element -> callfunc store_oper .)
    GOETHAN         reduce using rule 64 (element -> callfunc store_oper .)
    ;               reduce using rule 64 (element -> callfunc store_oper .)
    )               reduce using rule 64 (element -> callfunc store_oper .)
    ,               reduce using rule 64 (element -> callfunc store_oper .)


state 120

    (65) element -> compound store_oper .
    /               reduce using rule 65 (element -> compound store_oper .)
    *               reduce using rule 65 (element -> compound store_oper .)
    -               reduce using rule 65 (element -> compound store_oper .)
    +               reduce using rule 65 (element -> compound store_oper .)
    OR              reduce using rule 65 (element -> compound store_oper .)
    EQEQ            reduce using rule 65 (element -> compound store_oper .)
    DIFF            reduce using rule 65 (element -> compound store_oper .)
    AND             reduce using rule 65 (element -> compound store_oper .)
    <               reduce using rule 65 (element -> compound store_oper .)
    LOETHAN         reduce using rule 65 (element -> compound store_oper .)
    >               reduce using rule 65 (element -> compound store_oper .)
    GOETHAN         reduce using rule 65 (element -> compound store_oper .)
    ;               reduce using rule 65 (element -> compound store_oper .)
    )               reduce using rule 65 (element -> compound store_oper .)
    ,               reduce using rule 65 (element -> compound store_oper .)


state 121

    (66) element -> const store_const .
    /               reduce using rule 66 (element -> const store_const .)
    *               reduce using rule 66 (element -> const store_const .)
    -               reduce using rule 66 (element -> const store_const .)
    +               reduce using rule 66 (element -> const store_const .)
    OR              reduce using rule 66 (element -> const store_const .)
    EQEQ            reduce using rule 66 (element -> const store_const .)
    DIFF            reduce using rule 66 (element -> const store_const .)
    AND             reduce using rule 66 (element -> const store_const .)
    <               reduce using rule 66 (element -> const store_const .)
    LOETHAN         reduce using rule 66 (element -> const store_const .)
    >               reduce using rule 66 (element -> const store_const .)
    GOETHAN         reduce using rule 66 (element -> const store_const .)
    ;               reduce using rule 66 (element -> const store_const .)
    )               reduce using rule 66 (element -> const store_const .)
    ,               reduce using rule 66 (element -> const store_const .)


state 122

    (8) vars -> VAR datatype varids store_type . ; vars
    ;               shift and go to state 141


state 123

    (11) varids -> ID , . varids
    (10) varids -> . ID
    (11) varids -> . ID , varids
    ID              shift and go to state 82

    varids                         shift and go to state 142

state 124

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent . } close_func functions
    }               shift and go to state 143


state 125

    (16) funcontent -> statement . funcontent
    (31) statement -> statement . statement
    (15) funcontent -> .
    (16) funcontent -> . statement funcontent
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 15 (funcontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 15 (funcontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    statement                      shift and go to state 144
    funcontent                     shift and go to state 145
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 126

    (63) factor -> ( store_op expr . ) store_op
    )               shift and go to state 146


state 127

    (27) statement -> returns unload_pv ; .
    WHILE           reduce using rule 27 (statement -> returns unload_pv ; .)
    INPUT           reduce using rule 27 (statement -> returns unload_pv ; .)
    OUTPUT          reduce using rule 27 (statement -> returns unload_pv ; .)
    IF              reduce using rule 27 (statement -> returns unload_pv ; .)
    RETURN          reduce using rule 27 (statement -> returns unload_pv ; .)
    ID              reduce using rule 27 (statement -> returns unload_pv ; .)
    (               reduce using rule 27 (statement -> returns unload_pv ; .)
    STRING          reduce using rule 27 (statement -> returns unload_pv ; .)
    FLOAT           reduce using rule 27 (statement -> returns unload_pv ; .)
    INT             reduce using rule 27 (statement -> returns unload_pv ; .)
    FALSE           reduce using rule 27 (statement -> returns unload_pv ; .)
    TRUE            reduce using rule 27 (statement -> returns unload_pv ; .)
    }               reduce using rule 27 (statement -> returns unload_pv ; .)


state 128

    (40) loop -> WHILE store_jump ( . expr ) store_gotof { statement } end_loop
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 147
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 129

    (39) input -> INPUT ( ID . store_oper ) ;
    (92) store_oper -> .
    )               reduce using rule 92 (store_oper -> .)

    store_oper                     shift and go to state 148

state 130

    (32) var_assign -> ID store_oper = . expr ;
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 149
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 131

    (74) callfunc -> ID verify_func add_fstack . ( callfuncpar ver_params ) end_fstack store_gosub
    (               shift and go to state 150


state 132

    (36) output -> OUTPUT ( expr . outex ) ;
    (37) outex -> .
    (38) outex -> . , expr outex
    )               reduce using rule 37 (outex -> .)
    ,               shift and go to state 152

    outex                          shift and go to state 151

state 133

    (34) ifelse -> IF ( expr . ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> IF ( expr . ) store_gotof { statement } store_endif
    )               shift and go to state 153


state 134

    (33) returns -> RETURN expr store_rquad .
    ;               reduce using rule 33 (returns -> RETURN expr store_rquad .)


state 135

    (68) compoundx -> ID store_oper .
    /               reduce using rule 68 (compoundx -> ID store_oper .)
    *               reduce using rule 68 (compoundx -> ID store_oper .)
    -               reduce using rule 68 (compoundx -> ID store_oper .)
    +               reduce using rule 68 (compoundx -> ID store_oper .)
    OR              reduce using rule 68 (compoundx -> ID store_oper .)
    EQEQ            reduce using rule 68 (compoundx -> ID store_oper .)
    DIFF            reduce using rule 68 (compoundx -> ID store_oper .)
    AND             reduce using rule 68 (compoundx -> ID store_oper .)
    <               reduce using rule 68 (compoundx -> ID store_oper .)
    LOETHAN         reduce using rule 68 (compoundx -> ID store_oper .)
    >               reduce using rule 68 (compoundx -> ID store_oper .)
    GOETHAN         reduce using rule 68 (compoundx -> ID store_oper .)
    ;               reduce using rule 68 (compoundx -> ID store_oper .)
    )               reduce using rule 68 (compoundx -> ID store_oper .)
    ,               reduce using rule 68 (compoundx -> ID store_oper .)


state 136

    (43) exprx -> exprop arexp .
    ;               reduce using rule 43 (exprx -> exprop arexp .)
    )               reduce using rule 43 (exprx -> exprop arexp .)
    ,               reduce using rule 43 (exprx -> exprop arexp .)


state 137

    (55) arexpextra -> - term . arexpextra
    (54) arexpextra -> .
    (55) arexpextra -> . - term arexpextra
    (56) arexpextra -> . + term arexpextra
    OR              reduce using rule 54 (arexpextra -> .)
    EQEQ            reduce using rule 54 (arexpextra -> .)
    DIFF            reduce using rule 54 (arexpextra -> .)
    AND             reduce using rule 54 (arexpextra -> .)
    <               reduce using rule 54 (arexpextra -> .)
    LOETHAN         reduce using rule 54 (arexpextra -> .)
    >               reduce using rule 54 (arexpextra -> .)
    GOETHAN         reduce using rule 54 (arexpextra -> .)
    ;               reduce using rule 54 (arexpextra -> .)
    )               reduce using rule 54 (arexpextra -> .)
    ,               reduce using rule 54 (arexpextra -> .)
    -               shift and go to state 114
    +               shift and go to state 115

    arexpextra                     shift and go to state 154

state 138

    (56) arexpextra -> + term . arexpextra
    (54) arexpextra -> .
    (55) arexpextra -> . - term arexpextra
    (56) arexpextra -> . + term arexpextra
    OR              reduce using rule 54 (arexpextra -> .)
    EQEQ            reduce using rule 54 (arexpextra -> .)
    DIFF            reduce using rule 54 (arexpextra -> .)
    AND             reduce using rule 54 (arexpextra -> .)
    <               reduce using rule 54 (arexpextra -> .)
    LOETHAN         reduce using rule 54 (arexpextra -> .)
    >               reduce using rule 54 (arexpextra -> .)
    GOETHAN         reduce using rule 54 (arexpextra -> .)
    ;               reduce using rule 54 (arexpextra -> .)
    )               reduce using rule 54 (arexpextra -> .)
    ,               reduce using rule 54 (arexpextra -> .)
    -               shift and go to state 114
    +               shift and go to state 115

    arexpextra                     shift and go to state 155

state 139

    (60) termx -> / factor . termx
    (59) termx -> .
    (60) termx -> . / factor termx
    (61) termx -> . * factor termx
    -               reduce using rule 59 (termx -> .)
    +               reduce using rule 59 (termx -> .)
    OR              reduce using rule 59 (termx -> .)
    EQEQ            reduce using rule 59 (termx -> .)
    DIFF            reduce using rule 59 (termx -> .)
    AND             reduce using rule 59 (termx -> .)
    <               reduce using rule 59 (termx -> .)
    LOETHAN         reduce using rule 59 (termx -> .)
    >               reduce using rule 59 (termx -> .)
    GOETHAN         reduce using rule 59 (termx -> .)
    ;               reduce using rule 59 (termx -> .)
    )               reduce using rule 59 (termx -> .)
    ,               reduce using rule 59 (termx -> .)
    /               shift and go to state 117
    *               shift and go to state 118

    termx                          shift and go to state 156

state 140

    (61) termx -> * factor . termx
    (59) termx -> .
    (60) termx -> . / factor termx
    (61) termx -> . * factor termx
    -               reduce using rule 59 (termx -> .)
    +               reduce using rule 59 (termx -> .)
    OR              reduce using rule 59 (termx -> .)
    EQEQ            reduce using rule 59 (termx -> .)
    DIFF            reduce using rule 59 (termx -> .)
    AND             reduce using rule 59 (termx -> .)
    <               reduce using rule 59 (termx -> .)
    LOETHAN         reduce using rule 59 (termx -> .)
    >               reduce using rule 59 (termx -> .)
    GOETHAN         reduce using rule 59 (termx -> .)
    ;               reduce using rule 59 (termx -> .)
    )               reduce using rule 59 (termx -> .)
    ,               reduce using rule 59 (termx -> .)
    /               shift and go to state 117
    *               shift and go to state 118

    termx                          shift and go to state 157

state 141

    (8) vars -> VAR datatype varids store_type ; . vars
    (8) vars -> . VAR datatype varids store_type ; vars
    (9) vars -> .
    VAR             shift and go to state 47
    WHILE           reduce using rule 9 (vars -> .)
    INPUT           reduce using rule 9 (vars -> .)
    OUTPUT          reduce using rule 9 (vars -> .)
    IF              reduce using rule 9 (vars -> .)
    RETURN          reduce using rule 9 (vars -> .)
    ID              reduce using rule 9 (vars -> .)
    (               reduce using rule 9 (vars -> .)
    STRING          reduce using rule 9 (vars -> .)
    FLOAT           reduce using rule 9 (vars -> .)
    INT             reduce using rule 9 (vars -> .)
    FALSE           reduce using rule 9 (vars -> .)
    TRUE            reduce using rule 9 (vars -> .)
    }               reduce using rule 9 (vars -> .)

    vars                           shift and go to state 158

state 142

    (11) varids -> ID , varids .
    ;               reduce using rule 11 (varids -> ID , varids .)


state 143

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } . close_func functions
    (96) close_func -> .
    VOID            reduce using rule 96 (close_func -> .)
    D_BOOL          reduce using rule 96 (close_func -> .)
    D_STRING        reduce using rule 96 (close_func -> .)
    D_FLOAT         reduce using rule 96 (close_func -> .)
    D_INT           reduce using rule 96 (close_func -> .)
    VAR             reduce using rule 96 (close_func -> .)
    FUNC            reduce using rule 96 (close_func -> .)

    close_func                     shift and go to state 159

state 144

    (31) statement -> statement statement .
    (16) funcontent -> statement . funcontent
    (31) statement -> statement . statement
    (15) funcontent -> .
    (16) funcontent -> . statement funcontent
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 15 (funcontent -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for INPUT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for ( resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for STRING resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for INT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for } resolved using rule 15 (funcontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 15 (funcontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    statement                      shift and go to state 144
    funcontent                     shift and go to state 145
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 145

    (16) funcontent -> statement funcontent .
    }               reduce using rule 16 (funcontent -> statement funcontent .)


state 146

    (63) factor -> ( store_op expr ) . store_op
    (91) store_op -> .
    /               reduce using rule 91 (store_op -> .)
    *               reduce using rule 91 (store_op -> .)
    -               reduce using rule 91 (store_op -> .)
    +               reduce using rule 91 (store_op -> .)
    OR              reduce using rule 91 (store_op -> .)
    EQEQ            reduce using rule 91 (store_op -> .)
    DIFF            reduce using rule 91 (store_op -> .)
    AND             reduce using rule 91 (store_op -> .)
    <               reduce using rule 91 (store_op -> .)
    LOETHAN         reduce using rule 91 (store_op -> .)
    >               reduce using rule 91 (store_op -> .)
    GOETHAN         reduce using rule 91 (store_op -> .)
    ;               reduce using rule 91 (store_op -> .)
    )               reduce using rule 91 (store_op -> .)
    ,               reduce using rule 91 (store_op -> .)

    store_op                       shift and go to state 160

state 147

    (40) loop -> WHILE store_jump ( expr . ) store_gotof { statement } end_loop
    )               shift and go to state 161


state 148

    (39) input -> INPUT ( ID store_oper . ) ;
    )               shift and go to state 162


state 149

    (32) var_assign -> ID store_oper = expr . ;
    ;               shift and go to state 163


state 150

    (74) callfunc -> ID verify_func add_fstack ( . callfuncpar ver_params ) end_fstack store_gosub
    (75) callfuncpar -> .
    (76) callfuncpar -> . expr store_pquad callfuncparx
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    )               reduce using rule 75 (callfuncpar -> .)
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    callfuncpar                    shift and go to state 164
    expr                           shift and go to state 165
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 151

    (36) output -> OUTPUT ( expr outex . ) ;
    )               shift and go to state 166


state 152

    (38) outex -> , . expr outex
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 167
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 153

    (34) ifelse -> IF ( expr ) . store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> IF ( expr ) . store_gotof { statement } store_endif
    (104) store_gotof -> .
    {               reduce using rule 104 (store_gotof -> .)

    store_gotof                    shift and go to state 168

state 154

    (55) arexpextra -> - term arexpextra .
    OR              reduce using rule 55 (arexpextra -> - term arexpextra .)
    EQEQ            reduce using rule 55 (arexpextra -> - term arexpextra .)
    DIFF            reduce using rule 55 (arexpextra -> - term arexpextra .)
    AND             reduce using rule 55 (arexpextra -> - term arexpextra .)
    <               reduce using rule 55 (arexpextra -> - term arexpextra .)
    LOETHAN         reduce using rule 55 (arexpextra -> - term arexpextra .)
    >               reduce using rule 55 (arexpextra -> - term arexpextra .)
    GOETHAN         reduce using rule 55 (arexpextra -> - term arexpextra .)
    ;               reduce using rule 55 (arexpextra -> - term arexpextra .)
    )               reduce using rule 55 (arexpextra -> - term arexpextra .)
    ,               reduce using rule 55 (arexpextra -> - term arexpextra .)


state 155

    (56) arexpextra -> + term arexpextra .
    OR              reduce using rule 56 (arexpextra -> + term arexpextra .)
    EQEQ            reduce using rule 56 (arexpextra -> + term arexpextra .)
    DIFF            reduce using rule 56 (arexpextra -> + term arexpextra .)
    AND             reduce using rule 56 (arexpextra -> + term arexpextra .)
    <               reduce using rule 56 (arexpextra -> + term arexpextra .)
    LOETHAN         reduce using rule 56 (arexpextra -> + term arexpextra .)
    >               reduce using rule 56 (arexpextra -> + term arexpextra .)
    GOETHAN         reduce using rule 56 (arexpextra -> + term arexpextra .)
    ;               reduce using rule 56 (arexpextra -> + term arexpextra .)
    )               reduce using rule 56 (arexpextra -> + term arexpextra .)
    ,               reduce using rule 56 (arexpextra -> + term arexpextra .)


state 156

    (60) termx -> / factor termx .
    -               reduce using rule 60 (termx -> / factor termx .)
    +               reduce using rule 60 (termx -> / factor termx .)
    OR              reduce using rule 60 (termx -> / factor termx .)
    EQEQ            reduce using rule 60 (termx -> / factor termx .)
    DIFF            reduce using rule 60 (termx -> / factor termx .)
    AND             reduce using rule 60 (termx -> / factor termx .)
    <               reduce using rule 60 (termx -> / factor termx .)
    LOETHAN         reduce using rule 60 (termx -> / factor termx .)
    >               reduce using rule 60 (termx -> / factor termx .)
    GOETHAN         reduce using rule 60 (termx -> / factor termx .)
    ;               reduce using rule 60 (termx -> / factor termx .)
    )               reduce using rule 60 (termx -> / factor termx .)
    ,               reduce using rule 60 (termx -> / factor termx .)


state 157

    (61) termx -> * factor termx .
    -               reduce using rule 61 (termx -> * factor termx .)
    +               reduce using rule 61 (termx -> * factor termx .)
    OR              reduce using rule 61 (termx -> * factor termx .)
    EQEQ            reduce using rule 61 (termx -> * factor termx .)
    DIFF            reduce using rule 61 (termx -> * factor termx .)
    AND             reduce using rule 61 (termx -> * factor termx .)
    <               reduce using rule 61 (termx -> * factor termx .)
    LOETHAN         reduce using rule 61 (termx -> * factor termx .)
    >               reduce using rule 61 (termx -> * factor termx .)
    GOETHAN         reduce using rule 61 (termx -> * factor termx .)
    ;               reduce using rule 61 (termx -> * factor termx .)
    )               reduce using rule 61 (termx -> * factor termx .)
    ,               reduce using rule 61 (termx -> * factor termx .)


state 158

    (8) vars -> VAR datatype varids store_type ; vars .
    WHILE           reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    INPUT           reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    OUTPUT          reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    IF              reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    RETURN          reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    ID              reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    (               reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    STRING          reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    FLOAT           reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    INT             reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    FALSE           reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    TRUE            reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    }               reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)


state 159

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func . functions
    (13) functions -> . datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (14) functions -> .
    (79) datatype -> . VOID
    (80) datatype -> . D_BOOL
    (81) datatype -> . D_STRING
    (82) datatype -> . D_FLOAT
    (83) datatype -> . D_INT
    VAR             reduce using rule 14 (functions -> .)
    FUNC            reduce using rule 14 (functions -> .)
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    datatype                       shift and go to state 16
    functions                      shift and go to state 169

state 160

    (63) factor -> ( store_op expr ) store_op .
    /               reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    *               reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    -               reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    +               reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    OR              reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    EQEQ            reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    DIFF            reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    AND             reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    <               reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    LOETHAN         reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    >               reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    GOETHAN         reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    ;               reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    )               reduce using rule 63 (factor -> ( store_op expr ) store_op .)
    ,               reduce using rule 63 (factor -> ( store_op expr ) store_op .)


state 161

    (40) loop -> WHILE store_jump ( expr ) . store_gotof { statement } end_loop
    (104) store_gotof -> .
    {               reduce using rule 104 (store_gotof -> .)

    store_gotof                    shift and go to state 170

state 162

    (39) input -> INPUT ( ID store_oper ) . ;
    ;               shift and go to state 171


state 163

    (32) var_assign -> ID store_oper = expr ; .
    WHILE           reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    INPUT           reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    OUTPUT          reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    IF              reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    RETURN          reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    ID              reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    (               reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    STRING          reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    FLOAT           reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    INT             reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    FALSE           reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    TRUE            reduce using rule 32 (var_assign -> ID store_oper = expr ; .)
    }               reduce using rule 32 (var_assign -> ID store_oper = expr ; .)


state 164

    (74) callfunc -> ID verify_func add_fstack ( callfuncpar . ver_params ) end_fstack store_gosub
    (99) ver_params -> .
    )               reduce using rule 99 (ver_params -> .)

    ver_params                     shift and go to state 172

state 165

    (76) callfuncpar -> expr . store_pquad callfuncparx
    (98) store_pquad -> .
    ,               reduce using rule 98 (store_pquad -> .)
    )               reduce using rule 98 (store_pquad -> .)

    store_pquad                    shift and go to state 173

state 166

    (36) output -> OUTPUT ( expr outex ) . ;
    ;               shift and go to state 174


state 167

    (38) outex -> , expr . outex
    (37) outex -> .
    (38) outex -> . , expr outex
    )               reduce using rule 37 (outex -> .)
    ,               shift and go to state 152

    outex                          shift and go to state 175

state 168

    (34) ifelse -> IF ( expr ) store_gotof . { statement } ELSE store_endif { statement }
    (35) ifelse -> IF ( expr ) store_gotof . { statement } store_endif
    {               shift and go to state 176


state 169

    (13) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions .
    VAR             reduce using rule 13 (functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions .)
    FUNC            reduce using rule 13 (functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions .)


state 170

    (40) loop -> WHILE store_jump ( expr ) store_gotof . { statement } end_loop
    {               shift and go to state 177


state 171

    (39) input -> INPUT ( ID store_oper ) ; .
    WHILE           reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    INPUT           reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    OUTPUT          reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    IF              reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    RETURN          reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    ID              reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    (               reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    STRING          reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    FLOAT           reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    INT             reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    FALSE           reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    TRUE            reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)
    }               reduce using rule 39 (input -> INPUT ( ID store_oper ) ; .)


state 172

    (74) callfunc -> ID verify_func add_fstack ( callfuncpar ver_params . ) end_fstack store_gosub
    )               shift and go to state 178


state 173

    (76) callfuncpar -> expr store_pquad . callfuncparx
    (77) callfuncparx -> .
    (78) callfuncparx -> . , callfuncpar
    )               reduce using rule 77 (callfuncparx -> .)
    ,               shift and go to state 180

    callfuncparx                   shift and go to state 179

state 174

    (36) output -> OUTPUT ( expr outex ) ; .
    WHILE           reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    INPUT           reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    OUTPUT          reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    IF              reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    RETURN          reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    ID              reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    (               reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    STRING          reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    FLOAT           reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    INT             reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    FALSE           reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    TRUE            reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)
    }               reduce using rule 36 (output -> OUTPUT ( expr outex ) ; .)


state 175

    (38) outex -> , expr outex .
    )               reduce using rule 38 (outex -> , expr outex .)


state 176

    (34) ifelse -> IF ( expr ) store_gotof { . statement } ELSE store_endif { statement }
    (35) ifelse -> IF ( expr ) store_gotof { . statement } store_endif
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 30 (statement -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 60
    statement                      shift and go to state 181
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 177

    (40) loop -> WHILE store_jump ( expr ) store_gotof { . statement } end_loop
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 30 (statement -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 60
    statement                      shift and go to state 182
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 178

    (74) callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) . end_fstack store_gosub
    (102) end_fstack -> .
    /               reduce using rule 102 (end_fstack -> .)
    *               reduce using rule 102 (end_fstack -> .)
    -               reduce using rule 102 (end_fstack -> .)
    +               reduce using rule 102 (end_fstack -> .)
    OR              reduce using rule 102 (end_fstack -> .)
    EQEQ            reduce using rule 102 (end_fstack -> .)
    DIFF            reduce using rule 102 (end_fstack -> .)
    AND             reduce using rule 102 (end_fstack -> .)
    <               reduce using rule 102 (end_fstack -> .)
    LOETHAN         reduce using rule 102 (end_fstack -> .)
    >               reduce using rule 102 (end_fstack -> .)
    GOETHAN         reduce using rule 102 (end_fstack -> .)
    ;               reduce using rule 102 (end_fstack -> .)
    )               reduce using rule 102 (end_fstack -> .)
    ,               reduce using rule 102 (end_fstack -> .)

    end_fstack                     shift and go to state 183

state 179

    (76) callfuncpar -> expr store_pquad callfuncparx .
    )               reduce using rule 76 (callfuncpar -> expr store_pquad callfuncparx .)


state 180

    (78) callfuncparx -> , . callfuncpar
    (75) callfuncpar -> .
    (76) callfuncpar -> . expr store_pquad callfuncparx
    (41) expr -> . arexp exprx
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
    )               reduce using rule 75 (callfuncpar -> .)
    (               shift and go to state 52
    ID              shift and go to state 102
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    callfuncpar                    shift and go to state 184
    expr                           shift and go to state 165
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 181

    (34) ifelse -> IF ( expr ) store_gotof { statement . } ELSE store_endif { statement }
    (35) ifelse -> IF ( expr ) store_gotof { statement . } store_endif
    (31) statement -> statement . statement
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               shift and go to state 186
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 60
    statement                      shift and go to state 185
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 182

    (40) loop -> WHILE store_jump ( expr ) store_gotof { statement . } end_loop
    (31) statement -> statement . statement
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               shift and go to state 187
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 60
    statement                      shift and go to state 185
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 183

    (74) callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack . store_gosub
    (103) store_gosub -> .
    /               reduce using rule 103 (store_gosub -> .)
    *               reduce using rule 103 (store_gosub -> .)
    -               reduce using rule 103 (store_gosub -> .)
    +               reduce using rule 103 (store_gosub -> .)
    OR              reduce using rule 103 (store_gosub -> .)
    EQEQ            reduce using rule 103 (store_gosub -> .)
    DIFF            reduce using rule 103 (store_gosub -> .)
    AND             reduce using rule 103 (store_gosub -> .)
    <               reduce using rule 103 (store_gosub -> .)
    LOETHAN         reduce using rule 103 (store_gosub -> .)
    >               reduce using rule 103 (store_gosub -> .)
    GOETHAN         reduce using rule 103 (store_gosub -> .)
    ;               reduce using rule 103 (store_gosub -> .)
    )               reduce using rule 103 (store_gosub -> .)
    ,               reduce using rule 103 (store_gosub -> .)

    store_gosub                    shift and go to state 188

state 184

    (78) callfuncparx -> , callfuncpar .
    )               reduce using rule 78 (callfuncparx -> , callfuncpar .)


state 185

    (31) statement -> statement statement .
    (31) statement -> statement . statement
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! reduce/reduce conflict for WHILE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for INPUT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for ( resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for STRING resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for INT resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 31 (statement -> statement statement .)
  ! reduce/reduce conflict for } resolved using rule 31 (statement -> statement statement .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 31 (statement -> statement statement .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    statement                      shift and go to state 185
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 186

    (34) ifelse -> IF ( expr ) store_gotof { statement } . ELSE store_endif { statement }
    (35) ifelse -> IF ( expr ) store_gotof { statement } . store_endif
    (97) store_endif -> .
    ELSE            shift and go to state 189
    WHILE           reduce using rule 97 (store_endif -> .)
    INPUT           reduce using rule 97 (store_endif -> .)
    OUTPUT          reduce using rule 97 (store_endif -> .)
    IF              reduce using rule 97 (store_endif -> .)
    RETURN          reduce using rule 97 (store_endif -> .)
    ID              reduce using rule 97 (store_endif -> .)
    (               reduce using rule 97 (store_endif -> .)
    STRING          reduce using rule 97 (store_endif -> .)
    FLOAT           reduce using rule 97 (store_endif -> .)
    INT             reduce using rule 97 (store_endif -> .)
    FALSE           reduce using rule 97 (store_endif -> .)
    TRUE            reduce using rule 97 (store_endif -> .)
    }               reduce using rule 97 (store_endif -> .)

    store_endif                    shift and go to state 190

state 187

    (40) loop -> WHILE store_jump ( expr ) store_gotof { statement } . end_loop
    (106) end_loop -> .
    WHILE           reduce using rule 106 (end_loop -> .)
    INPUT           reduce using rule 106 (end_loop -> .)
    OUTPUT          reduce using rule 106 (end_loop -> .)
    IF              reduce using rule 106 (end_loop -> .)
    RETURN          reduce using rule 106 (end_loop -> .)
    ID              reduce using rule 106 (end_loop -> .)
    (               reduce using rule 106 (end_loop -> .)
    STRING          reduce using rule 106 (end_loop -> .)
    FLOAT           reduce using rule 106 (end_loop -> .)
    INT             reduce using rule 106 (end_loop -> .)
    FALSE           reduce using rule 106 (end_loop -> .)
    TRUE            reduce using rule 106 (end_loop -> .)
    }               reduce using rule 106 (end_loop -> .)

    end_loop                       shift and go to state 191

state 188

    (74) callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .
    /               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    *               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    -               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    +               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    OR              reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    EQEQ            reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    DIFF            reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    AND             reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    <               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    LOETHAN         reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    >               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    GOETHAN         reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    ;               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    )               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    ,               reduce using rule 74 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)


state 189

    (34) ifelse -> IF ( expr ) store_gotof { statement } ELSE . store_endif { statement }
    (97) store_endif -> .
    {               reduce using rule 97 (store_endif -> .)

    store_endif                    shift and go to state 192

state 190

    (35) ifelse -> IF ( expr ) store_gotof { statement } store_endif .
    WHILE           reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    INPUT           reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    OUTPUT          reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    IF              reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    RETURN          reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    ID              reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    (               reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    STRING          reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    FLOAT           reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    INT             reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    FALSE           reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    TRUE            reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    }               reduce using rule 35 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)


state 191

    (40) loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .
    WHILE           reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    INPUT           reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    OUTPUT          reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    IF              reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    RETURN          reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    ID              reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    (               reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    STRING          reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    FLOAT           reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    INT             reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    FALSE           reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    TRUE            reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    }               reduce using rule 40 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)


state 192

    (34) ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif . { statement }
    {               shift and go to state 193


state 193

    (34) ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { . statement }
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 30 (statement -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 60
    statement                      shift and go to state 194
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 194

    (34) ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement . }
    (31) statement -> statement . statement
    (23) statement -> . loop unload_pv
    (24) statement -> . input unload_pv
    (25) statement -> . output unload_pv
    (26) statement -> . ifelse unload_pv
    (27) statement -> . returns unload_pv ;
    (28) statement -> . expr ;
    (29) statement -> . var_assign unload_pv
    (30) statement -> .
    (31) statement -> . statement statement
    (40) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (39) input -> . INPUT ( ID store_oper ) ;
    (36) output -> . OUTPUT ( expr outex ) ;
    (34) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (35) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (33) returns -> . RETURN expr store_rquad
    (41) expr -> . arexp exprx
    (32) var_assign -> . ID store_oper = expr ;
    (52) arexp -> . term arexpextra
    (53) arexp -> . term
    (57) term -> . factor termx
    (58) term -> . factor
    (62) factor -> . element
    (63) factor -> . ( store_op expr ) store_op
    (64) element -> . callfunc store_oper
    (65) element -> . compound store_oper
    (66) element -> . const store_const
    (74) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (67) compound -> . compoundx
    (69) const -> . STRING
    (70) const -> . FLOAT
    (71) const -> . INT
    (72) const -> . FALSE
    (73) const -> . TRUE
    (68) compoundx -> . ID store_oper
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               shift and go to state 195
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 76
    FLOAT           shift and go to state 77
    INT             shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expr                           shift and go to state 60
    statement                      shift and go to state 185
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    term                           shift and go to state 69
    factor                         shift and go to state 70
    element                        shift and go to state 71
    callfunc                       shift and go to state 72
    compound                       shift and go to state 73
    const                          shift and go to state 74
    compoundx                      shift and go to state 75

state 195

    (34) ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .
    WHILE           reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    INPUT           reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    OUTPUT          reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    IF              reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    RETURN          reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    ID              reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    (               reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    STRING          reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    FLOAT           reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    INT             reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    FALSE           reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    TRUE            reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    }               reduce using rule 34 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)


Conflicts:

shift/reduce conflict for VAR in state 5 resolved as shift
shift/reduce conflict for VAR in state 25 resolved as shift
shift/reduce conflict for WHILE in state 49 resolved as shift
shift/reduce conflict for INPUT in state 49 resolved as shift
shift/reduce conflict for OUTPUT in state 49 resolved as shift
shift/reduce conflict for IF in state 49 resolved as shift
shift/reduce conflict for RETURN in state 49 resolved as shift
shift/reduce conflict for ID in state 49 resolved as shift
shift/reduce conflict for ( in state 49 resolved as shift
shift/reduce conflict for STRING in state 49 resolved as shift
shift/reduce conflict for FLOAT in state 49 resolved as shift
shift/reduce conflict for INT in state 49 resolved as shift
shift/reduce conflict for FALSE in state 49 resolved as shift
shift/reduce conflict for TRUE in state 49 resolved as shift
shift/reduce conflict for WHILE in state 54 resolved as shift
shift/reduce conflict for INPUT in state 54 resolved as shift
shift/reduce conflict for OUTPUT in state 54 resolved as shift
shift/reduce conflict for IF in state 54 resolved as shift
shift/reduce conflict for RETURN in state 54 resolved as shift
shift/reduce conflict for ID in state 54 resolved as shift
shift/reduce conflict for ( in state 54 resolved as shift
shift/reduce conflict for STRING in state 54 resolved as shift
shift/reduce conflict for FLOAT in state 54 resolved as shift
shift/reduce conflict for INT in state 54 resolved as shift
shift/reduce conflict for FALSE in state 54 resolved as shift
shift/reduce conflict for TRUE in state 54 resolved as shift
shift/reduce conflict for WHILE in state 83 resolved as shift
shift/reduce conflict for INPUT in state 83 resolved as shift
shift/reduce conflict for OUTPUT in state 83 resolved as shift
shift/reduce conflict for IF in state 83 resolved as shift
shift/reduce conflict for RETURN in state 83 resolved as shift
shift/reduce conflict for ID in state 83 resolved as shift
shift/reduce conflict for ( in state 83 resolved as shift
shift/reduce conflict for STRING in state 83 resolved as shift
shift/reduce conflict for FLOAT in state 83 resolved as shift
shift/reduce conflict for INT in state 83 resolved as shift
shift/reduce conflict for FALSE in state 83 resolved as shift
shift/reduce conflict for TRUE in state 83 resolved as shift
shift/reduce conflict for WHILE in state 86 resolved as shift
shift/reduce conflict for INPUT in state 86 resolved as shift
shift/reduce conflict for OUTPUT in state 86 resolved as shift
shift/reduce conflict for IF in state 86 resolved as shift
shift/reduce conflict for RETURN in state 86 resolved as shift
shift/reduce conflict for ID in state 86 resolved as shift
shift/reduce conflict for ( in state 86 resolved as shift
shift/reduce conflict for STRING in state 86 resolved as shift
shift/reduce conflict for FLOAT in state 86 resolved as shift
shift/reduce conflict for INT in state 86 resolved as shift
shift/reduce conflict for FALSE in state 86 resolved as shift
shift/reduce conflict for TRUE in state 86 resolved as shift
shift/reduce conflict for WHILE in state 125 resolved as shift
shift/reduce conflict for INPUT in state 125 resolved as shift
shift/reduce conflict for OUTPUT in state 125 resolved as shift
shift/reduce conflict for IF in state 125 resolved as shift
shift/reduce conflict for RETURN in state 125 resolved as shift
shift/reduce conflict for ID in state 125 resolved as shift
shift/reduce conflict for ( in state 125 resolved as shift
shift/reduce conflict for STRING in state 125 resolved as shift
shift/reduce conflict for FLOAT in state 125 resolved as shift
shift/reduce conflict for INT in state 125 resolved as shift
shift/reduce conflict for FALSE in state 125 resolved as shift
shift/reduce conflict for TRUE in state 125 resolved as shift
shift/reduce conflict for WHILE in state 144 resolved as shift
shift/reduce conflict for INPUT in state 144 resolved as shift
shift/reduce conflict for OUTPUT in state 144 resolved as shift
shift/reduce conflict for IF in state 144 resolved as shift
shift/reduce conflict for RETURN in state 144 resolved as shift
shift/reduce conflict for ID in state 144 resolved as shift
shift/reduce conflict for ( in state 144 resolved as shift
shift/reduce conflict for STRING in state 144 resolved as shift
shift/reduce conflict for FLOAT in state 144 resolved as shift
shift/reduce conflict for INT in state 144 resolved as shift
shift/reduce conflict for FALSE in state 144 resolved as shift
shift/reduce conflict for TRUE in state 144 resolved as shift
shift/reduce conflict for WHILE in state 176 resolved as shift
shift/reduce conflict for INPUT in state 176 resolved as shift
shift/reduce conflict for OUTPUT in state 176 resolved as shift
shift/reduce conflict for IF in state 176 resolved as shift
shift/reduce conflict for RETURN in state 176 resolved as shift
shift/reduce conflict for ID in state 176 resolved as shift
shift/reduce conflict for ( in state 176 resolved as shift
shift/reduce conflict for STRING in state 176 resolved as shift
shift/reduce conflict for FLOAT in state 176 resolved as shift
shift/reduce conflict for INT in state 176 resolved as shift
shift/reduce conflict for FALSE in state 176 resolved as shift
shift/reduce conflict for TRUE in state 176 resolved as shift
shift/reduce conflict for WHILE in state 177 resolved as shift
shift/reduce conflict for INPUT in state 177 resolved as shift
shift/reduce conflict for OUTPUT in state 177 resolved as shift
shift/reduce conflict for IF in state 177 resolved as shift
shift/reduce conflict for RETURN in state 177 resolved as shift
shift/reduce conflict for ID in state 177 resolved as shift
shift/reduce conflict for ( in state 177 resolved as shift
shift/reduce conflict for STRING in state 177 resolved as shift
shift/reduce conflict for FLOAT in state 177 resolved as shift
shift/reduce conflict for INT in state 177 resolved as shift
shift/reduce conflict for FALSE in state 177 resolved as shift
shift/reduce conflict for TRUE in state 177 resolved as shift
shift/reduce conflict for } in state 181 resolved as shift
shift/reduce conflict for WHILE in state 181 resolved as shift
shift/reduce conflict for INPUT in state 181 resolved as shift
shift/reduce conflict for OUTPUT in state 181 resolved as shift
shift/reduce conflict for IF in state 181 resolved as shift
shift/reduce conflict for RETURN in state 181 resolved as shift
shift/reduce conflict for ID in state 181 resolved as shift
shift/reduce conflict for ( in state 181 resolved as shift
shift/reduce conflict for STRING in state 181 resolved as shift
shift/reduce conflict for FLOAT in state 181 resolved as shift
shift/reduce conflict for INT in state 181 resolved as shift
shift/reduce conflict for FALSE in state 181 resolved as shift
shift/reduce conflict for TRUE in state 181 resolved as shift
shift/reduce conflict for } in state 182 resolved as shift
shift/reduce conflict for WHILE in state 182 resolved as shift
shift/reduce conflict for INPUT in state 182 resolved as shift
shift/reduce conflict for OUTPUT in state 182 resolved as shift
shift/reduce conflict for IF in state 182 resolved as shift
shift/reduce conflict for RETURN in state 182 resolved as shift
shift/reduce conflict for ID in state 182 resolved as shift
shift/reduce conflict for ( in state 182 resolved as shift
shift/reduce conflict for STRING in state 182 resolved as shift
shift/reduce conflict for FLOAT in state 182 resolved as shift
shift/reduce conflict for INT in state 182 resolved as shift
shift/reduce conflict for FALSE in state 182 resolved as shift
shift/reduce conflict for TRUE in state 182 resolved as shift
shift/reduce conflict for WHILE in state 185 resolved as shift
shift/reduce conflict for INPUT in state 185 resolved as shift
shift/reduce conflict for OUTPUT in state 185 resolved as shift
shift/reduce conflict for IF in state 185 resolved as shift
shift/reduce conflict for RETURN in state 185 resolved as shift
shift/reduce conflict for ID in state 185 resolved as shift
shift/reduce conflict for ( in state 185 resolved as shift
shift/reduce conflict for STRING in state 185 resolved as shift
shift/reduce conflict for FLOAT in state 185 resolved as shift
shift/reduce conflict for INT in state 185 resolved as shift
shift/reduce conflict for FALSE in state 185 resolved as shift
shift/reduce conflict for TRUE in state 185 resolved as shift
shift/reduce conflict for WHILE in state 193 resolved as shift
shift/reduce conflict for INPUT in state 193 resolved as shift
shift/reduce conflict for OUTPUT in state 193 resolved as shift
shift/reduce conflict for IF in state 193 resolved as shift
shift/reduce conflict for RETURN in state 193 resolved as shift
shift/reduce conflict for ID in state 193 resolved as shift
shift/reduce conflict for ( in state 193 resolved as shift
shift/reduce conflict for STRING in state 193 resolved as shift
shift/reduce conflict for FLOAT in state 193 resolved as shift
shift/reduce conflict for INT in state 193 resolved as shift
shift/reduce conflict for FALSE in state 193 resolved as shift
shift/reduce conflict for TRUE in state 193 resolved as shift
shift/reduce conflict for } in state 194 resolved as shift
shift/reduce conflict for WHILE in state 194 resolved as shift
shift/reduce conflict for INPUT in state 194 resolved as shift
shift/reduce conflict for OUTPUT in state 194 resolved as shift
shift/reduce conflict for IF in state 194 resolved as shift
shift/reduce conflict for RETURN in state 194 resolved as shift
shift/reduce conflict for ID in state 194 resolved as shift
shift/reduce conflict for ( in state 194 resolved as shift
shift/reduce conflict for STRING in state 194 resolved as shift
shift/reduce conflict for FLOAT in state 194 resolved as shift
shift/reduce conflict for INT in state 194 resolved as shift
shift/reduce conflict for FALSE in state 194 resolved as shift
shift/reduce conflict for TRUE in state 194 resolved as shift
reduce/reduce conflict in state 49 resolved using rule maincontent -> <empty>
rejected rule (statement -> <empty>) in state 49
reduce/reduce conflict in state 54 resolved using rule maincontent -> <empty>
rejected rule (statement -> <empty>) in state 54
reduce/reduce conflict in state 69 resolved using rule arexp -> term
rejected rule (arexpextra -> <empty>) in state 69
reduce/reduce conflict in state 70 resolved using rule term -> factor
rejected rule (termx -> <empty>) in state 70
reduce/reduce conflict in state 83 resolved using rule funcontent -> <empty>
rejected rule (statement -> <empty>) in state 83
reduce/reduce conflict in state 86 resolved using rule maincontent -> <empty>
rejected rule (statement -> statement statement) in state 86
reduce/reduce conflict in state 86 resolved using rule statement -> statement statement
rejected rule (statement -> <empty>) in state 86
reduce/reduce conflict in state 86 resolved using rule maincontent -> <empty>
rejected rule (statement -> <empty>) in state 86
reduce/reduce conflict in state 125 resolved using rule funcontent -> <empty>
rejected rule (statement -> <empty>) in state 125
reduce/reduce conflict in state 144 resolved using rule funcontent -> <empty>
rejected rule (statement -> statement statement) in state 144
reduce/reduce conflict in state 144 resolved using rule statement -> statement statement
rejected rule (statement -> <empty>) in state 144
reduce/reduce conflict in state 144 resolved using rule funcontent -> <empty>
rejected rule (statement -> <empty>) in state 144
reduce/reduce conflict in state 185 resolved using rule statement -> statement statement
rejected rule (statement -> <empty>) in state 185